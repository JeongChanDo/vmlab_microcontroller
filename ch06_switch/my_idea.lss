
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004e0  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000070f  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr\io.h>              // Most basic include files
#include <util/delay.h>       // Add the necessary ones


int main(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	6d 97       	sbiw	r28, 0x1d	; 29
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
  d2:	e4 e3       	ldi	r30, 0x34	; 52
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
    PORTC = 0xFF;
  da:	e5 e3       	ldi	r30, 0x35	; 53
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
    DDRD = 0x00;
  e2:	e1 e3       	ldi	r30, 0x31	; 49
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
    PORTD = 0xFF;
  e8:	e2 e3       	ldi	r30, 0x32	; 50
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 83       	st	Z, r24
    unsigned char key;

    while (1)
    {
    	key = PIND & 0xFE;
  f0:	e0 e3       	ldi	r30, 0x30	; 48
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	8d 8f       	std	Y+29, r24	; 0x1d
		
        if (key == PIND)
  fa:	e0 e3       	ldi	r30, 0x30	; 48
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	8d 8d       	ldd	r24, Y+29	; 0x1d
 102:	98 17       	cp	r25, r24
 104:	09 f0       	breq	.+2      	; 0x108 <main+0x4a>
 106:	ec c0       	rjmp	.+472    	; 0x2e0 <main+0x222>
        {
        	PORTC=0xFF;
 108:	e5 e3       	ldi	r30, 0x35	; 53
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	80 83       	st	Z, r24
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a8 e4       	ldi	r26, 0x48	; 72
 116:	b3 e4       	ldi	r27, 0x43	; 67
 118:	89 8f       	std	Y+25, r24	; 0x19
 11a:	9a 8f       	std	Y+26, r25	; 0x1a
 11c:	ab 8f       	std	Y+27, r26	; 0x1b
 11e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 120:	69 8d       	ldd	r22, Y+25	; 0x19
 122:	7a 8d       	ldd	r23, Y+26	; 0x1a
 124:	8b 8d       	ldd	r24, Y+27	; 0x1b
 126:	9c 8d       	ldd	r25, Y+28	; 0x1c
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	4a e7       	ldi	r20, 0x7A	; 122
 12e:	53 e4       	ldi	r21, 0x43	; 67
 130:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 134:	dc 01       	movw	r26, r24
 136:	cb 01       	movw	r24, r22
 138:	8d 8b       	std	Y+21, r24	; 0x15
 13a:	9e 8b       	std	Y+22, r25	; 0x16
 13c:	af 8b       	std	Y+23, r26	; 0x17
 13e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 140:	6d 89       	ldd	r22, Y+21	; 0x15
 142:	7e 89       	ldd	r23, Y+22	; 0x16
 144:	8f 89       	ldd	r24, Y+23	; 0x17
 146:	98 8d       	ldd	r25, Y+24	; 0x18
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e8       	ldi	r20, 0x80	; 128
 14e:	5f e3       	ldi	r21, 0x3F	; 63
 150:	0e 94 75 01 	call	0x2ea	; 0x2ea <__cmpsf2>
 154:	88 23       	and	r24, r24
 156:	2c f4       	brge	.+10     	; 0x162 <main+0xa4>
		__ticks = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9c 8b       	std	Y+20, r25	; 0x14
 15e:	8b 8b       	std	Y+19, r24	; 0x13
 160:	3f c0       	rjmp	.+126    	; 0x1e0 <main+0x122>
	else if (__tmp > 65535)
 162:	6d 89       	ldd	r22, Y+21	; 0x15
 164:	7e 89       	ldd	r23, Y+22	; 0x16
 166:	8f 89       	ldd	r24, Y+23	; 0x17
 168:	98 8d       	ldd	r25, Y+24	; 0x18
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	3f ef       	ldi	r19, 0xFF	; 255
 16e:	4f e7       	ldi	r20, 0x7F	; 127
 170:	57 e4       	ldi	r21, 0x47	; 71
 172:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__gesf2>
 176:	18 16       	cp	r1, r24
 178:	4c f5       	brge	.+82     	; 0x1cc <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 17a:	69 8d       	ldd	r22, Y+25	; 0x19
 17c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 17e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 180:	9c 8d       	ldd	r25, Y+28	; 0x1c
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__fixunssfsi>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	9c 8b       	std	Y+20, r25	; 0x14
 1a0:	8b 8b       	std	Y+19, r24	; 0x13
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <main+0x104>
 1a4:	89 e1       	ldi	r24, 0x19	; 25
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	9a 8b       	std	Y+18, r25	; 0x12
 1aa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ac:	89 89       	ldd	r24, Y+17	; 0x11
 1ae:	9a 89       	ldd	r25, Y+18	; 0x12
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xf2>
 1b4:	9a 8b       	std	Y+18, r25	; 0x12
 1b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b8:	8b 89       	ldd	r24, Y+19	; 0x13
 1ba:	9c 89       	ldd	r25, Y+20	; 0x14
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	9c 8b       	std	Y+20, r25	; 0x14
 1c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	8b 89       	ldd	r24, Y+19	; 0x13
 1c4:	9c 89       	ldd	r25, Y+20	; 0x14
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	69 f7       	brne	.-38     	; 0x1a4 <main+0xe6>
 1ca:	14 c0       	rjmp	.+40     	; 0x1f4 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1cc:	6d 89       	ldd	r22, Y+21	; 0x15
 1ce:	7e 89       	ldd	r23, Y+22	; 0x16
 1d0:	8f 89       	ldd	r24, Y+23	; 0x17
 1d2:	98 8d       	ldd	r25, Y+24	; 0x18
 1d4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__fixunssfsi>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	9c 8b       	std	Y+20, r25	; 0x14
 1de:	8b 8b       	std	Y+19, r24	; 0x13
 1e0:	8b 89       	ldd	r24, Y+19	; 0x13
 1e2:	9c 89       	ldd	r25, Y+20	; 0x14
 1e4:	98 8b       	std	Y+16, r25	; 0x10
 1e6:	8f 87       	std	Y+15, r24	; 0x0f
 1e8:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ea:	98 89       	ldd	r25, Y+16	; 0x10
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x12e>
 1f0:	98 8b       	std	Y+16, r25	; 0x10
 1f2:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(200);
            PORTC =0x00;
 1f4:	e5 e3       	ldi	r30, 0x35	; 53
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a8 e4       	ldi	r26, 0x48	; 72
 200:	b3 e4       	ldi	r27, 0x43	; 67
 202:	8b 87       	std	Y+11, r24	; 0x0b
 204:	9c 87       	std	Y+12, r25	; 0x0c
 206:	ad 87       	std	Y+13, r26	; 0x0d
 208:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 20a:	6b 85       	ldd	r22, Y+11	; 0x0b
 20c:	7c 85       	ldd	r23, Y+12	; 0x0c
 20e:	8d 85       	ldd	r24, Y+13	; 0x0d
 210:	9e 85       	ldd	r25, Y+14	; 0x0e
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	4a e7       	ldi	r20, 0x7A	; 122
 218:	53 e4       	ldi	r21, 0x43	; 67
 21a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	8f 83       	std	Y+7, r24	; 0x07
 224:	98 87       	std	Y+8, r25	; 0x08
 226:	a9 87       	std	Y+9, r26	; 0x09
 228:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 22a:	6f 81       	ldd	r22, Y+7	; 0x07
 22c:	78 85       	ldd	r23, Y+8	; 0x08
 22e:	89 85       	ldd	r24, Y+9	; 0x09
 230:	9a 85       	ldd	r25, Y+10	; 0x0a
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e8       	ldi	r20, 0x80	; 128
 238:	5f e3       	ldi	r21, 0x3F	; 63
 23a:	0e 94 75 01 	call	0x2ea	; 0x2ea <__cmpsf2>
 23e:	88 23       	and	r24, r24
 240:	2c f4       	brge	.+10     	; 0x24c <main+0x18e>
		__ticks = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9e 83       	std	Y+6, r25	; 0x06
 248:	8d 83       	std	Y+5, r24	; 0x05
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <main+0x20c>
	else if (__tmp > 65535)
 24c:	6f 81       	ldd	r22, Y+7	; 0x07
 24e:	78 85       	ldd	r23, Y+8	; 0x08
 250:	89 85       	ldd	r24, Y+9	; 0x09
 252:	9a 85       	ldd	r25, Y+10	; 0x0a
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	3f ef       	ldi	r19, 0xFF	; 255
 258:	4f e7       	ldi	r20, 0x7F	; 127
 25a:	57 e4       	ldi	r21, 0x47	; 71
 25c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__gesf2>
 260:	18 16       	cp	r1, r24
 262:	4c f5       	brge	.+82     	; 0x2b6 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 264:	6b 85       	ldd	r22, Y+11	; 0x0b
 266:	7c 85       	ldd	r23, Y+12	; 0x0c
 268:	8d 85       	ldd	r24, Y+13	; 0x0d
 26a:	9e 85       	ldd	r25, Y+14	; 0x0e
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e2       	ldi	r20, 0x20	; 32
 272:	51 e4       	ldi	r21, 0x41	; 65
 274:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__fixunssfsi>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	9e 83       	std	Y+6, r25	; 0x06
 28a:	8d 83       	std	Y+5, r24	; 0x05
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <main+0x1ee>
 28e:	89 e1       	ldi	r24, 0x19	; 25
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 83       	std	Y+4, r25	; 0x04
 294:	8b 83       	std	Y+3, r24	; 0x03
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	9c 81       	ldd	r25, Y+4	; 0x04
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x1dc>
 29e:	9c 83       	std	Y+4, r25	; 0x04
 2a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	8d 81       	ldd	r24, Y+5	; 0x05
 2a4:	9e 81       	ldd	r25, Y+6	; 0x06
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	9e 83       	std	Y+6, r25	; 0x06
 2aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ac:	8d 81       	ldd	r24, Y+5	; 0x05
 2ae:	9e 81       	ldd	r25, Y+6	; 0x06
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	69 f7       	brne	.-38     	; 0x28e <main+0x1d0>
 2b4:	1d cf       	rjmp	.-454    	; 0xf0 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b6:	6f 81       	ldd	r22, Y+7	; 0x07
 2b8:	78 85       	ldd	r23, Y+8	; 0x08
 2ba:	89 85       	ldd	r24, Y+9	; 0x09
 2bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__fixunssfsi>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	9e 83       	std	Y+6, r25	; 0x06
 2c8:	8d 83       	std	Y+5, r24	; 0x05
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	9e 81       	ldd	r25, Y+6	; 0x06
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x218>
 2da:	9a 83       	std	Y+2, r25	; 0x02
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	08 cf       	rjmp	.-496    	; 0xf0 <main+0x32>
            _delay_ms(200);
        }
        else
        	PORTC = 0xFF;
 2e0:	e5 e3       	ldi	r30, 0x35	; 53
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
 2e8:	03 cf       	rjmp	.-506    	; 0xf0 <main+0x32>

000002ea <__cmpsf2>:
 2ea:	2f d0       	rcall	.+94     	; 0x34a <__fp_cmp>
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__cmpsf2+0x6>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret

000002f2 <__fixunssfsi>:
 2f2:	57 d0       	rcall	.+174    	; 0x3a2 <__fp_splitA>
 2f4:	88 f0       	brcs	.+34     	; 0x318 <__fixunssfsi+0x26>
 2f6:	9f 57       	subi	r25, 0x7F	; 127
 2f8:	90 f0       	brcs	.+36     	; 0x31e <__fixunssfsi+0x2c>
 2fa:	b9 2f       	mov	r27, r25
 2fc:	99 27       	eor	r25, r25
 2fe:	b7 51       	subi	r27, 0x17	; 23
 300:	a0 f0       	brcs	.+40     	; 0x32a <__fixunssfsi+0x38>
 302:	d1 f0       	breq	.+52     	; 0x338 <__fixunssfsi+0x46>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	1a f0       	brmi	.+6      	; 0x314 <__fixunssfsi+0x22>
 30e:	ba 95       	dec	r27
 310:	c9 f7       	brne	.-14     	; 0x304 <__fixunssfsi+0x12>
 312:	12 c0       	rjmp	.+36     	; 0x338 <__fixunssfsi+0x46>
 314:	b1 30       	cpi	r27, 0x01	; 1
 316:	81 f0       	breq	.+32     	; 0x338 <__fixunssfsi+0x46>
 318:	5e d0       	rcall	.+188    	; 0x3d6 <__fp_zero>
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	08 95       	ret
 31e:	5b c0       	rjmp	.+182    	; 0x3d6 <__fp_zero>
 320:	67 2f       	mov	r22, r23
 322:	78 2f       	mov	r23, r24
 324:	88 27       	eor	r24, r24
 326:	b8 5f       	subi	r27, 0xF8	; 248
 328:	39 f0       	breq	.+14     	; 0x338 <__fixunssfsi+0x46>
 32a:	b9 3f       	cpi	r27, 0xF9	; 249
 32c:	cc f3       	brlt	.-14     	; 0x320 <__fixunssfsi+0x2e>
 32e:	86 95       	lsr	r24
 330:	77 95       	ror	r23
 332:	67 95       	ror	r22
 334:	b3 95       	inc	r27
 336:	d9 f7       	brne	.-10     	; 0x32e <__fixunssfsi+0x3c>
 338:	3e f4       	brtc	.+14     	; 0x348 <__fixunssfsi+0x56>
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__fp_cmp>:
 34a:	99 0f       	add	r25, r25
 34c:	00 08       	sbc	r0, r0
 34e:	55 0f       	add	r21, r21
 350:	aa 0b       	sbc	r26, r26
 352:	e0 e8       	ldi	r30, 0x80	; 128
 354:	fe ef       	ldi	r31, 0xFE	; 254
 356:	16 16       	cp	r1, r22
 358:	17 06       	cpc	r1, r23
 35a:	e8 07       	cpc	r30, r24
 35c:	f9 07       	cpc	r31, r25
 35e:	c0 f0       	brcs	.+48     	; 0x390 <__fp_cmp+0x46>
 360:	12 16       	cp	r1, r18
 362:	13 06       	cpc	r1, r19
 364:	e4 07       	cpc	r30, r20
 366:	f5 07       	cpc	r31, r21
 368:	98 f0       	brcs	.+38     	; 0x390 <__fp_cmp+0x46>
 36a:	62 1b       	sub	r22, r18
 36c:	73 0b       	sbc	r23, r19
 36e:	84 0b       	sbc	r24, r20
 370:	95 0b       	sbc	r25, r21
 372:	39 f4       	brne	.+14     	; 0x382 <__fp_cmp+0x38>
 374:	0a 26       	eor	r0, r26
 376:	61 f0       	breq	.+24     	; 0x390 <__fp_cmp+0x46>
 378:	23 2b       	or	r18, r19
 37a:	24 2b       	or	r18, r20
 37c:	25 2b       	or	r18, r21
 37e:	21 f4       	brne	.+8      	; 0x388 <__fp_cmp+0x3e>
 380:	08 95       	ret
 382:	0a 26       	eor	r0, r26
 384:	09 f4       	brne	.+2      	; 0x388 <__fp_cmp+0x3e>
 386:	a1 40       	sbci	r26, 0x01	; 1
 388:	a6 95       	lsr	r26
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	81 1d       	adc	r24, r1
 38e:	81 1d       	adc	r24, r1
 390:	08 95       	ret

00000392 <__fp_split3>:
 392:	57 fd       	sbrc	r21, 7
 394:	90 58       	subi	r25, 0x80	; 128
 396:	44 0f       	add	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	59 f0       	breq	.+22     	; 0x3b2 <__fp_splitA+0x10>
 39c:	5f 3f       	cpi	r21, 0xFF	; 255
 39e:	71 f0       	breq	.+28     	; 0x3bc <__fp_splitA+0x1a>
 3a0:	47 95       	ror	r20

000003a2 <__fp_splitA>:
 3a2:	88 0f       	add	r24, r24
 3a4:	97 fb       	bst	r25, 7
 3a6:	99 1f       	adc	r25, r25
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_splitA+0x20>
 3aa:	9f 3f       	cpi	r25, 0xFF	; 255
 3ac:	79 f0       	breq	.+30     	; 0x3cc <__fp_splitA+0x2a>
 3ae:	87 95       	ror	r24
 3b0:	08 95       	ret
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	f2 cf       	rjmp	.-28     	; 0x3a0 <__fp_split3+0xe>
 3bc:	46 95       	lsr	r20
 3be:	f1 df       	rcall	.-30     	; 0x3a2 <__fp_splitA>
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <__fp_splitA+0x30>
 3c2:	16 16       	cp	r1, r22
 3c4:	17 06       	cpc	r1, r23
 3c6:	18 06       	cpc	r1, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <__fp_splitA+0xc>
 3cc:	86 95       	lsr	r24
 3ce:	71 05       	cpc	r23, r1
 3d0:	61 05       	cpc	r22, r1
 3d2:	08 94       	sec
 3d4:	08 95       	ret

000003d6 <__fp_zero>:
 3d6:	e8 94       	clt

000003d8 <__fp_szero>:
 3d8:	bb 27       	eor	r27, r27
 3da:	66 27       	eor	r22, r22
 3dc:	77 27       	eor	r23, r23
 3de:	cb 01       	movw	r24, r22
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret

000003e4 <__gesf2>:
 3e4:	b2 df       	rcall	.-156    	; 0x34a <__fp_cmp>
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <__gesf2+0x6>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <__mulsf3>:
 3ec:	0b d0       	rcall	.+22     	; 0x404 <__mulsf3x>
 3ee:	78 c0       	rjmp	.+240    	; 0x4e0 <__fp_round>
 3f0:	69 d0       	rcall	.+210    	; 0x4c4 <__fp_pscA>
 3f2:	28 f0       	brcs	.+10     	; 0x3fe <__mulsf3+0x12>
 3f4:	6e d0       	rcall	.+220    	; 0x4d2 <__fp_pscB>
 3f6:	18 f0       	brcs	.+6      	; 0x3fe <__mulsf3+0x12>
 3f8:	95 23       	and	r25, r21
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__mulsf3+0x12>
 3fc:	5a c0       	rjmp	.+180    	; 0x4b2 <__fp_inf>
 3fe:	5f c0       	rjmp	.+190    	; 0x4be <__fp_nan>
 400:	11 24       	eor	r1, r1
 402:	ea cf       	rjmp	.-44     	; 0x3d8 <__fp_szero>

00000404 <__mulsf3x>:
 404:	c6 df       	rcall	.-116    	; 0x392 <__fp_split3>
 406:	a0 f3       	brcs	.-24     	; 0x3f0 <__mulsf3+0x4>

00000408 <__mulsf3_pse>:
 408:	95 9f       	mul	r25, r21
 40a:	d1 f3       	breq	.-12     	; 0x400 <__mulsf3+0x14>
 40c:	95 0f       	add	r25, r21
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	55 1f       	adc	r21, r21
 412:	62 9f       	mul	r22, r18
 414:	f0 01       	movw	r30, r0
 416:	72 9f       	mul	r23, r18
 418:	bb 27       	eor	r27, r27
 41a:	f0 0d       	add	r31, r0
 41c:	b1 1d       	adc	r27, r1
 41e:	63 9f       	mul	r22, r19
 420:	aa 27       	eor	r26, r26
 422:	f0 0d       	add	r31, r0
 424:	b1 1d       	adc	r27, r1
 426:	aa 1f       	adc	r26, r26
 428:	64 9f       	mul	r22, r20
 42a:	66 27       	eor	r22, r22
 42c:	b0 0d       	add	r27, r0
 42e:	a1 1d       	adc	r26, r1
 430:	66 1f       	adc	r22, r22
 432:	82 9f       	mul	r24, r18
 434:	22 27       	eor	r18, r18
 436:	b0 0d       	add	r27, r0
 438:	a1 1d       	adc	r26, r1
 43a:	62 1f       	adc	r22, r18
 43c:	73 9f       	mul	r23, r19
 43e:	b0 0d       	add	r27, r0
 440:	a1 1d       	adc	r26, r1
 442:	62 1f       	adc	r22, r18
 444:	83 9f       	mul	r24, r19
 446:	a0 0d       	add	r26, r0
 448:	61 1d       	adc	r22, r1
 44a:	22 1f       	adc	r18, r18
 44c:	74 9f       	mul	r23, r20
 44e:	33 27       	eor	r19, r19
 450:	a0 0d       	add	r26, r0
 452:	61 1d       	adc	r22, r1
 454:	23 1f       	adc	r18, r19
 456:	84 9f       	mul	r24, r20
 458:	60 0d       	add	r22, r0
 45a:	21 1d       	adc	r18, r1
 45c:	82 2f       	mov	r24, r18
 45e:	76 2f       	mov	r23, r22
 460:	6a 2f       	mov	r22, r26
 462:	11 24       	eor	r1, r1
 464:	9f 57       	subi	r25, 0x7F	; 127
 466:	50 40       	sbci	r21, 0x00	; 0
 468:	8a f0       	brmi	.+34     	; 0x48c <__mulsf3_pse+0x84>
 46a:	e1 f0       	breq	.+56     	; 0x4a4 <__mulsf3_pse+0x9c>
 46c:	88 23       	and	r24, r24
 46e:	4a f0       	brmi	.+18     	; 0x482 <__mulsf3_pse+0x7a>
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	bb 1f       	adc	r27, r27
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	91 50       	subi	r25, 0x01	; 1
 47e:	50 40       	sbci	r21, 0x00	; 0
 480:	a9 f7       	brne	.-22     	; 0x46c <__mulsf3_pse+0x64>
 482:	9e 3f       	cpi	r25, 0xFE	; 254
 484:	51 05       	cpc	r21, r1
 486:	70 f0       	brcs	.+28     	; 0x4a4 <__mulsf3_pse+0x9c>
 488:	14 c0       	rjmp	.+40     	; 0x4b2 <__fp_inf>
 48a:	a6 cf       	rjmp	.-180    	; 0x3d8 <__fp_szero>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	ec f3       	brlt	.-6      	; 0x48a <__mulsf3_pse+0x82>
 490:	98 3e       	cpi	r25, 0xE8	; 232
 492:	dc f3       	brlt	.-10     	; 0x48a <__mulsf3_pse+0x82>
 494:	86 95       	lsr	r24
 496:	77 95       	ror	r23
 498:	67 95       	ror	r22
 49a:	b7 95       	ror	r27
 49c:	f7 95       	ror	r31
 49e:	e7 95       	ror	r30
 4a0:	9f 5f       	subi	r25, 0xFF	; 255
 4a2:	c1 f7       	brne	.-16     	; 0x494 <__mulsf3_pse+0x8c>
 4a4:	fe 2b       	or	r31, r30
 4a6:	88 0f       	add	r24, r24
 4a8:	91 1d       	adc	r25, r1
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <__fp_inf>:
 4b2:	97 f9       	bld	r25, 7
 4b4:	9f 67       	ori	r25, 0x7F	; 127
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	08 95       	ret

000004be <__fp_nan>:
 4be:	9f ef       	ldi	r25, 0xFF	; 255
 4c0:	80 ec       	ldi	r24, 0xC0	; 192
 4c2:	08 95       	ret

000004c4 <__fp_pscA>:
 4c4:	00 24       	eor	r0, r0
 4c6:	0a 94       	dec	r0
 4c8:	16 16       	cp	r1, r22
 4ca:	17 06       	cpc	r1, r23
 4cc:	18 06       	cpc	r1, r24
 4ce:	09 06       	cpc	r0, r25
 4d0:	08 95       	ret

000004d2 <__fp_pscB>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	12 16       	cp	r1, r18
 4d8:	13 06       	cpc	r1, r19
 4da:	14 06       	cpc	r1, r20
 4dc:	05 06       	cpc	r0, r21
 4de:	08 95       	ret

000004e0 <__fp_round>:
 4e0:	09 2e       	mov	r0, r25
 4e2:	03 94       	inc	r0
 4e4:	00 0c       	add	r0, r0
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0xc>
 4e8:	88 23       	and	r24, r24
 4ea:	52 f0       	brmi	.+20     	; 0x500 <__fp_round+0x20>
 4ec:	bb 0f       	add	r27, r27
 4ee:	40 f4       	brcc	.+16     	; 0x500 <__fp_round+0x20>
 4f0:	bf 2b       	or	r27, r31
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0x18>
 4f4:	60 ff       	sbrs	r22, 0
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <__fp_round+0x20>
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
