
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e1c  00000e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000b70  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007ca  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 cb 04 	call	0x996	; 0x996 <main>
  b6:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <LCD_init>:
#include <avr\io.h>              // Most basic include files
#include <util/delay.h>

//LCD 8비트 인터페이스 초기화 함수
void LCD_init()
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	6c 97       	sbiw	r28, 0x1c	; 28
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
  d2:	e7 e3       	ldi	r30, 0x37	; 55
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
	DDRG = 0xFF;
  da:	e4 e6       	ldi	r30, 0x64	; 100
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a0 ea       	ldi	r26, 0xA0	; 160
  e8:	b1 e4       	ldi	r27, 0x41	; 65
  ea:	89 8f       	std	Y+25, r24	; 0x19
  ec:	9a 8f       	std	Y+26, r25	; 0x1a
  ee:	ab 8f       	std	Y+27, r26	; 0x1b
  f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  f2:	69 8d       	ldd	r22, Y+25	; 0x19
  f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
  f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
  f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	4a e7       	ldi	r20, 0x7A	; 122
 100:	53 e4       	ldi	r21, 0x43	; 67
 102:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	8d 8b       	std	Y+21, r24	; 0x15
 10c:	9e 8b       	std	Y+22, r25	; 0x16
 10e:	af 8b       	std	Y+23, r26	; 0x17
 110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 112:	6d 89       	ldd	r22, Y+21	; 0x15
 114:	7e 89       	ldd	r23, Y+22	; 0x16
 116:	8f 89       	ldd	r24, Y+23	; 0x17
 118:	98 8d       	ldd	r25, Y+24	; 0x18
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e8       	ldi	r20, 0x80	; 128
 120:	5f e3       	ldi	r21, 0x3F	; 63
 122:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 126:	88 23       	and	r24, r24
 128:	2c f4       	brge	.+10     	; 0x134 <LCD_init+0x76>
		__ticks = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 8b       	std	Y+20, r25	; 0x14
 130:	8b 8b       	std	Y+19, r24	; 0x13
 132:	3f c0       	rjmp	.+126    	; 0x1b2 <LCD_init+0xf4>
	else if (__tmp > 65535)
 134:	6d 89       	ldd	r22, Y+21	; 0x15
 136:	7e 89       	ldd	r23, Y+22	; 0x16
 138:	8f 89       	ldd	r24, Y+23	; 0x17
 13a:	98 8d       	ldd	r25, Y+24	; 0x18
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	3f ef       	ldi	r19, 0xFF	; 255
 140:	4f e7       	ldi	r20, 0x7F	; 127
 142:	57 e4       	ldi	r21, 0x47	; 71
 144:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 148:	18 16       	cp	r1, r24
 14a:	4c f5       	brge	.+82     	; 0x19e <LCD_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14c:	69 8d       	ldd	r22, Y+25	; 0x19
 14e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 150:	8b 8d       	ldd	r24, Y+27	; 0x1b
 152:	9c 8d       	ldd	r25, Y+28	; 0x1c
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 e2       	ldi	r20, 0x20	; 32
 15a:	51 e4       	ldi	r21, 0x41	; 65
 15c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	9c 8b       	std	Y+20, r25	; 0x14
 172:	8b 8b       	std	Y+19, r24	; 0x13
 174:	0f c0       	rjmp	.+30     	; 0x194 <LCD_init+0xd6>
 176:	89 e1       	ldi	r24, 0x19	; 25
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9a 8b       	std	Y+18, r25	; 0x12
 17c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17e:	89 89       	ldd	r24, Y+17	; 0x11
 180:	9a 89       	ldd	r25, Y+18	; 0x12
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_init+0xc4>
 186:	9a 8b       	std	Y+18, r25	; 0x12
 188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	8b 89       	ldd	r24, Y+19	; 0x13
 18c:	9c 89       	ldd	r25, Y+20	; 0x14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	9c 8b       	std	Y+20, r25	; 0x14
 192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 194:	8b 89       	ldd	r24, Y+19	; 0x13
 196:	9c 89       	ldd	r25, Y+20	; 0x14
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	69 f7       	brne	.-38     	; 0x176 <LCD_init+0xb8>
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <LCD_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 19e:	6d 89       	ldd	r22, Y+21	; 0x15
 1a0:	7e 89       	ldd	r23, Y+22	; 0x16
 1a2:	8f 89       	ldd	r24, Y+23	; 0x17
 1a4:	98 8d       	ldd	r25, Y+24	; 0x18
 1a6:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	9c 8b       	std	Y+20, r25	; 0x14
 1b0:	8b 8b       	std	Y+19, r24	; 0x13
 1b2:	8b 89       	ldd	r24, Y+19	; 0x13
 1b4:	9c 89       	ldd	r25, Y+20	; 0x14
 1b6:	98 8b       	std	Y+16, r25	; 0x10
 1b8:	8f 87       	std	Y+15, r24	; 0x0f
 1ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 1bc:	98 89       	ldd	r25, Y+16	; 0x10
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_init+0x100>
 1c2:	98 8b       	std	Y+16, r25	; 0x10
 1c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_command(0x38);
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>
	LCD_command(0x08);
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>
	LCD_command(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	a0 e8       	ldi	r26, 0x80	; 128
 1e4:	bf e3       	ldi	r27, 0x3F	; 63
 1e6:	8b 87       	std	Y+11, r24	; 0x0b
 1e8:	9c 87       	std	Y+12, r25	; 0x0c
 1ea:	ad 87       	std	Y+13, r26	; 0x0d
 1ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1ee:	6b 85       	ldd	r22, Y+11	; 0x0b
 1f0:	7c 85       	ldd	r23, Y+12	; 0x0c
 1f2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	4a e7       	ldi	r20, 0x7A	; 122
 1fc:	53 e4       	ldi	r21, 0x43	; 67
 1fe:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	8f 83       	std	Y+7, r24	; 0x07
 208:	98 87       	std	Y+8, r25	; 0x08
 20a:	a9 87       	std	Y+9, r26	; 0x09
 20c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 20e:	6f 81       	ldd	r22, Y+7	; 0x07
 210:	78 85       	ldd	r23, Y+8	; 0x08
 212:	89 85       	ldd	r24, Y+9	; 0x09
 214:	9a 85       	ldd	r25, Y+10	; 0x0a
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e8       	ldi	r20, 0x80	; 128
 21c:	5f e3       	ldi	r21, 0x3F	; 63
 21e:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 222:	88 23       	and	r24, r24
 224:	2c f4       	brge	.+10     	; 0x230 <LCD_init+0x172>
		__ticks = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	9e 83       	std	Y+6, r25	; 0x06
 22c:	8d 83       	std	Y+5, r24	; 0x05
 22e:	3f c0       	rjmp	.+126    	; 0x2ae <LCD_init+0x1f0>
	else if (__tmp > 65535)
 230:	6f 81       	ldd	r22, Y+7	; 0x07
 232:	78 85       	ldd	r23, Y+8	; 0x08
 234:	89 85       	ldd	r24, Y+9	; 0x09
 236:	9a 85       	ldd	r25, Y+10	; 0x0a
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	3f ef       	ldi	r19, 0xFF	; 255
 23c:	4f e7       	ldi	r20, 0x7F	; 127
 23e:	57 e4       	ldi	r21, 0x47	; 71
 240:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 244:	18 16       	cp	r1, r24
 246:	4c f5       	brge	.+82     	; 0x29a <LCD_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 248:	6b 85       	ldd	r22, Y+11	; 0x0b
 24a:	7c 85       	ldd	r23, Y+12	; 0x0c
 24c:	8d 85       	ldd	r24, Y+13	; 0x0d
 24e:	9e 85       	ldd	r25, Y+14	; 0x0e
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e2       	ldi	r20, 0x20	; 32
 256:	51 e4       	ldi	r21, 0x41	; 65
 258:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	9e 83       	std	Y+6, r25	; 0x06
 26e:	8d 83       	std	Y+5, r24	; 0x05
 270:	0f c0       	rjmp	.+30     	; 0x290 <LCD_init+0x1d2>
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 83       	std	Y+4, r25	; 0x04
 278:	8b 83       	std	Y+3, r24	; 0x03
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	9c 81       	ldd	r25, Y+4	; 0x04
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_init+0x1c0>
 282:	9c 83       	std	Y+4, r25	; 0x04
 284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 286:	8d 81       	ldd	r24, Y+5	; 0x05
 288:	9e 81       	ldd	r25, Y+6	; 0x06
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	9e 83       	std	Y+6, r25	; 0x06
 28e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	9e 81       	ldd	r25, Y+6	; 0x06
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	69 f7       	brne	.-38     	; 0x272 <LCD_init+0x1b4>
 298:	14 c0       	rjmp	.+40     	; 0x2c2 <LCD_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29a:	6f 81       	ldd	r22, Y+7	; 0x07
 29c:	78 85       	ldd	r23, Y+8	; 0x08
 29e:	89 85       	ldd	r24, Y+9	; 0x09
 2a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a2:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 2a6:	dc 01       	movw	r26, r24
 2a8:	cb 01       	movw	r24, r22
 2aa:	9e 83       	std	Y+6, r25	; 0x06
 2ac:	8d 83       	std	Y+5, r24	; 0x05
 2ae:	8d 81       	ldd	r24, Y+5	; 0x05
 2b0:	9e 81       	ldd	r25, Y+6	; 0x06
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_init+0x1fc>
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_command(0x06);
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>
	LCD_command(0x0E);
 2ca:	8e e0       	ldi	r24, 0x0E	; 14
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>

}
 2d2:	6c 96       	adiw	r28, 0x1c	; 28
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <LCD_command>:

//LCD 명령 처리 함수
void LCD_command(unsigned char cmd)
{
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	e1 97       	sbiw	r28, 0x31	; 49
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	89 ab       	std	Y+49, r24	; 0x31
	//0000 0100
	PORTG = 0x04; //E=1, RW=0, RS=0 -> 명령 레지스터에 명령쓰기
 2fa:	e5 e6       	ldi	r30, 0x65	; 101
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	80 83       	st	Z, r24
	PORTB = cmd;  // 명령 전달
 302:	e8 e3       	ldi	r30, 0x38	; 56
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	89 a9       	ldd	r24, Y+49	; 0x31
 308:	80 83       	st	Z, r24
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a0 e8       	ldi	r26, 0x80	; 128
 310:	bf e3       	ldi	r27, 0x3F	; 63
 312:	8d a7       	std	Y+45, r24	; 0x2d
 314:	9e a7       	std	Y+46, r25	; 0x2e
 316:	af a7       	std	Y+47, r26	; 0x2f
 318:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 31a:	6d a5       	ldd	r22, Y+45	; 0x2d
 31c:	7e a5       	ldd	r23, Y+46	; 0x2e
 31e:	8f a5       	ldd	r24, Y+47	; 0x2f
 320:	98 a9       	ldd	r25, Y+48	; 0x30
 322:	2b ea       	ldi	r18, 0xAB	; 171
 324:	3a ea       	ldi	r19, 0xAA	; 170
 326:	4a ea       	ldi	r20, 0xAA	; 170
 328:	5e e3       	ldi	r21, 0x3E	; 62
 32a:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	89 a7       	std	Y+41, r24	; 0x29
 334:	9a a7       	std	Y+42, r25	; 0x2a
 336:	ab a7       	std	Y+43, r26	; 0x2b
 338:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 33a:	69 a5       	ldd	r22, Y+41	; 0x29
 33c:	7a a5       	ldd	r23, Y+42	; 0x2a
 33e:	8b a5       	ldd	r24, Y+43	; 0x2b
 340:	9c a5       	ldd	r25, Y+44	; 0x2c
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e8       	ldi	r20, 0x80	; 128
 348:	5f e3       	ldi	r21, 0x3F	; 63
 34a:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 34e:	88 23       	and	r24, r24
 350:	1c f4       	brge	.+6      	; 0x358 <LCD_command+0x74>
		__ticks = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	88 a7       	std	Y+40, r24	; 0x28
 356:	91 c0       	rjmp	.+290    	; 0x47a <LCD_command+0x196>
	else if (__tmp > 255)
 358:	69 a5       	ldd	r22, Y+41	; 0x29
 35a:	7a a5       	ldd	r23, Y+42	; 0x2a
 35c:	8b a5       	ldd	r24, Y+43	; 0x2b
 35e:	9c a5       	ldd	r25, Y+44	; 0x2c
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	4f e7       	ldi	r20, 0x7F	; 127
 366:	53 e4       	ldi	r21, 0x43	; 67
 368:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 36c:	18 16       	cp	r1, r24
 36e:	0c f0       	brlt	.+2      	; 0x372 <LCD_command+0x8e>
 370:	7b c0       	rjmp	.+246    	; 0x468 <LCD_command+0x184>
	{
		_delay_ms(__us / 1000.0);
 372:	6d a5       	ldd	r22, Y+45	; 0x2d
 374:	7e a5       	ldd	r23, Y+46	; 0x2e
 376:	8f a5       	ldd	r24, Y+47	; 0x2f
 378:	98 a9       	ldd	r25, Y+48	; 0x30
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	4a e7       	ldi	r20, 0x7A	; 122
 380:	54 e4       	ldi	r21, 0x44	; 68
 382:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divsf3>
 386:	dc 01       	movw	r26, r24
 388:	cb 01       	movw	r24, r22
 38a:	8c a3       	std	Y+36, r24	; 0x24
 38c:	9d a3       	std	Y+37, r25	; 0x25
 38e:	ae a3       	std	Y+38, r26	; 0x26
 390:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 392:	6c a1       	ldd	r22, Y+36	; 0x24
 394:	7d a1       	ldd	r23, Y+37	; 0x25
 396:	8e a1       	ldd	r24, Y+38	; 0x26
 398:	9f a1       	ldd	r25, Y+39	; 0x27
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	4a e7       	ldi	r20, 0x7A	; 122
 3a0:	53 e4       	ldi	r21, 0x43	; 67
 3a2:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	88 a3       	std	Y+32, r24	; 0x20
 3ac:	99 a3       	std	Y+33, r25	; 0x21
 3ae:	aa a3       	std	Y+34, r26	; 0x22
 3b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
 3b2:	68 a1       	ldd	r22, Y+32	; 0x20
 3b4:	79 a1       	ldd	r23, Y+33	; 0x21
 3b6:	8a a1       	ldd	r24, Y+34	; 0x22
 3b8:	9b a1       	ldd	r25, Y+35	; 0x23
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e8       	ldi	r20, 0x80	; 128
 3c0:	5f e3       	ldi	r21, 0x3F	; 63
 3c2:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	2c f4       	brge	.+10     	; 0x3d4 <LCD_command+0xf0>
		__ticks = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9f 8f       	std	Y+31, r25	; 0x1f
 3d0:	8e 8f       	std	Y+30, r24	; 0x1e
 3d2:	3f c0       	rjmp	.+126    	; 0x452 <LCD_command+0x16e>
	else if (__tmp > 65535)
 3d4:	68 a1       	ldd	r22, Y+32	; 0x20
 3d6:	79 a1       	ldd	r23, Y+33	; 0x21
 3d8:	8a a1       	ldd	r24, Y+34	; 0x22
 3da:	9b a1       	ldd	r25, Y+35	; 0x23
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	3f ef       	ldi	r19, 0xFF	; 255
 3e0:	4f e7       	ldi	r20, 0x7F	; 127
 3e2:	57 e4       	ldi	r21, 0x47	; 71
 3e4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 3e8:	18 16       	cp	r1, r24
 3ea:	4c f5       	brge	.+82     	; 0x43e <LCD_command+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ec:	6c a1       	ldd	r22, Y+36	; 0x24
 3ee:	7d a1       	ldd	r23, Y+37	; 0x25
 3f0:	8e a1       	ldd	r24, Y+38	; 0x26
 3f2:	9f a1       	ldd	r25, Y+39	; 0x27
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e2       	ldi	r20, 0x20	; 32
 3fa:	51 e4       	ldi	r21, 0x41	; 65
 3fc:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 400:	dc 01       	movw	r26, r24
 402:	cb 01       	movw	r24, r22
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 40c:	dc 01       	movw	r26, r24
 40e:	cb 01       	movw	r24, r22
 410:	9f 8f       	std	Y+31, r25	; 0x1f
 412:	8e 8f       	std	Y+30, r24	; 0x1e
 414:	0f c0       	rjmp	.+30     	; 0x434 <LCD_command+0x150>
 416:	89 e1       	ldi	r24, 0x19	; 25
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9d 8f       	std	Y+29, r25	; 0x1d
 41c:	8c 8f       	std	Y+28, r24	; 0x1c
 41e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 420:	9d 8d       	ldd	r25, Y+29	; 0x1d
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <LCD_command+0x13e>
 426:	9d 8f       	std	Y+29, r25	; 0x1d
 428:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 42c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	9f 8f       	std	Y+31, r25	; 0x1f
 432:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 434:	8e 8d       	ldd	r24, Y+30	; 0x1e
 436:	9f 8d       	ldd	r25, Y+31	; 0x1f
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	69 f7       	brne	.-38     	; 0x416 <LCD_command+0x132>
 43c:	24 c0       	rjmp	.+72     	; 0x486 <LCD_command+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 43e:	68 a1       	ldd	r22, Y+32	; 0x20
 440:	79 a1       	ldd	r23, Y+33	; 0x21
 442:	8a a1       	ldd	r24, Y+34	; 0x22
 444:	9b a1       	ldd	r25, Y+35	; 0x23
 446:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	9f 8f       	std	Y+31, r25	; 0x1f
 450:	8e 8f       	std	Y+30, r24	; 0x1e
 452:	8e 8d       	ldd	r24, Y+30	; 0x1e
 454:	9f 8d       	ldd	r25, Y+31	; 0x1f
 456:	9b 8f       	std	Y+27, r25	; 0x1b
 458:	8a 8f       	std	Y+26, r24	; 0x1a
 45a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 45c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_command+0x17a>
 462:	9b 8f       	std	Y+27, r25	; 0x1b
 464:	8a 8f       	std	Y+26, r24	; 0x1a
 466:	0f c0       	rjmp	.+30     	; 0x486 <LCD_command+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 468:	69 a5       	ldd	r22, Y+41	; 0x29
 46a:	7a a5       	ldd	r23, Y+42	; 0x2a
 46c:	8b a5       	ldd	r24, Y+43	; 0x2b
 46e:	9c a5       	ldd	r25, Y+44	; 0x2c
 470:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 474:	dc 01       	movw	r26, r24
 476:	cb 01       	movw	r24, r22
 478:	88 a7       	std	Y+40, r24	; 0x28
 47a:	88 a5       	ldd	r24, Y+40	; 0x28
 47c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 47e:	89 8d       	ldd	r24, Y+25	; 0x19
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <LCD_command+0x19c>
 484:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	PORTG = 0x00; //E=0, RW=0, RS=0
 486:	e5 e6       	ldi	r30, 0x65	; 101
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	10 82       	st	Z, r1
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	a0 e8       	ldi	r26, 0x80	; 128
 492:	bf e3       	ldi	r27, 0x3F	; 63
 494:	8d 8b       	std	Y+21, r24	; 0x15
 496:	9e 8b       	std	Y+22, r25	; 0x16
 498:	af 8b       	std	Y+23, r26	; 0x17
 49a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 49c:	6d 89       	ldd	r22, Y+21	; 0x15
 49e:	7e 89       	ldd	r23, Y+22	; 0x16
 4a0:	8f 89       	ldd	r24, Y+23	; 0x17
 4a2:	98 8d       	ldd	r25, Y+24	; 0x18
 4a4:	2b ea       	ldi	r18, 0xAB	; 171
 4a6:	3a ea       	ldi	r19, 0xAA	; 170
 4a8:	4a ea       	ldi	r20, 0xAA	; 170
 4aa:	5e e3       	ldi	r21, 0x3E	; 62
 4ac:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 4b0:	dc 01       	movw	r26, r24
 4b2:	cb 01       	movw	r24, r22
 4b4:	89 8b       	std	Y+17, r24	; 0x11
 4b6:	9a 8b       	std	Y+18, r25	; 0x12
 4b8:	ab 8b       	std	Y+19, r26	; 0x13
 4ba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 4bc:	69 89       	ldd	r22, Y+17	; 0x11
 4be:	7a 89       	ldd	r23, Y+18	; 0x12
 4c0:	8b 89       	ldd	r24, Y+19	; 0x13
 4c2:	9c 89       	ldd	r25, Y+20	; 0x14
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e8       	ldi	r20, 0x80	; 128
 4ca:	5f e3       	ldi	r21, 0x3F	; 63
 4cc:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 4d0:	88 23       	and	r24, r24
 4d2:	1c f4       	brge	.+6      	; 0x4da <LCD_command+0x1f6>
		__ticks = 1;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	88 8b       	std	Y+16, r24	; 0x10
 4d8:	91 c0       	rjmp	.+290    	; 0x5fc <LCD_command+0x318>
	else if (__tmp > 255)
 4da:	69 89       	ldd	r22, Y+17	; 0x11
 4dc:	7a 89       	ldd	r23, Y+18	; 0x12
 4de:	8b 89       	ldd	r24, Y+19	; 0x13
 4e0:	9c 89       	ldd	r25, Y+20	; 0x14
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	4f e7       	ldi	r20, 0x7F	; 127
 4e8:	53 e4       	ldi	r21, 0x43	; 67
 4ea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 4ee:	18 16       	cp	r1, r24
 4f0:	0c f0       	brlt	.+2      	; 0x4f4 <LCD_command+0x210>
 4f2:	7b c0       	rjmp	.+246    	; 0x5ea <LCD_command+0x306>
	{
		_delay_ms(__us / 1000.0);
 4f4:	6d 89       	ldd	r22, Y+21	; 0x15
 4f6:	7e 89       	ldd	r23, Y+22	; 0x16
 4f8:	8f 89       	ldd	r24, Y+23	; 0x17
 4fa:	98 8d       	ldd	r25, Y+24	; 0x18
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	4a e7       	ldi	r20, 0x7A	; 122
 502:	54 e4       	ldi	r21, 0x44	; 68
 504:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divsf3>
 508:	dc 01       	movw	r26, r24
 50a:	cb 01       	movw	r24, r22
 50c:	8c 87       	std	Y+12, r24	; 0x0c
 50e:	9d 87       	std	Y+13, r25	; 0x0d
 510:	ae 87       	std	Y+14, r26	; 0x0e
 512:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 514:	6c 85       	ldd	r22, Y+12	; 0x0c
 516:	7d 85       	ldd	r23, Y+13	; 0x0d
 518:	8e 85       	ldd	r24, Y+14	; 0x0e
 51a:	9f 85       	ldd	r25, Y+15	; 0x0f
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	4a e7       	ldi	r20, 0x7A	; 122
 522:	53 e4       	ldi	r21, 0x43	; 67
 524:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 528:	dc 01       	movw	r26, r24
 52a:	cb 01       	movw	r24, r22
 52c:	88 87       	std	Y+8, r24	; 0x08
 52e:	99 87       	std	Y+9, r25	; 0x09
 530:	aa 87       	std	Y+10, r26	; 0x0a
 532:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 534:	68 85       	ldd	r22, Y+8	; 0x08
 536:	79 85       	ldd	r23, Y+9	; 0x09
 538:	8a 85       	ldd	r24, Y+10	; 0x0a
 53a:	9b 85       	ldd	r25, Y+11	; 0x0b
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e8       	ldi	r20, 0x80	; 128
 542:	5f e3       	ldi	r21, 0x3F	; 63
 544:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 548:	88 23       	and	r24, r24
 54a:	2c f4       	brge	.+10     	; 0x556 <LCD_command+0x272>
		__ticks = 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9f 83       	std	Y+7, r25	; 0x07
 552:	8e 83       	std	Y+6, r24	; 0x06
 554:	3f c0       	rjmp	.+126    	; 0x5d4 <LCD_command+0x2f0>
	else if (__tmp > 65535)
 556:	68 85       	ldd	r22, Y+8	; 0x08
 558:	79 85       	ldd	r23, Y+9	; 0x09
 55a:	8a 85       	ldd	r24, Y+10	; 0x0a
 55c:	9b 85       	ldd	r25, Y+11	; 0x0b
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	3f ef       	ldi	r19, 0xFF	; 255
 562:	4f e7       	ldi	r20, 0x7F	; 127
 564:	57 e4       	ldi	r21, 0x47	; 71
 566:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 56a:	18 16       	cp	r1, r24
 56c:	4c f5       	brge	.+82     	; 0x5c0 <LCD_command+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 56e:	6c 85       	ldd	r22, Y+12	; 0x0c
 570:	7d 85       	ldd	r23, Y+13	; 0x0d
 572:	8e 85       	ldd	r24, Y+14	; 0x0e
 574:	9f 85       	ldd	r25, Y+15	; 0x0f
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e2       	ldi	r20, 0x20	; 32
 57c:	51 e4       	ldi	r21, 0x41	; 65
 57e:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 58e:	dc 01       	movw	r26, r24
 590:	cb 01       	movw	r24, r22
 592:	9f 83       	std	Y+7, r25	; 0x07
 594:	8e 83       	std	Y+6, r24	; 0x06
 596:	0f c0       	rjmp	.+30     	; 0x5b6 <LCD_command+0x2d2>
 598:	89 e1       	ldi	r24, 0x19	; 25
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	9d 83       	std	Y+5, r25	; 0x05
 59e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a0:	8c 81       	ldd	r24, Y+4	; 0x04
 5a2:	9d 81       	ldd	r25, Y+5	; 0x05
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_command+0x2c0>
 5a8:	9d 83       	std	Y+5, r25	; 0x05
 5aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ac:	8e 81       	ldd	r24, Y+6	; 0x06
 5ae:	9f 81       	ldd	r25, Y+7	; 0x07
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	9f 83       	std	Y+7, r25	; 0x07
 5b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b6:	8e 81       	ldd	r24, Y+6	; 0x06
 5b8:	9f 81       	ldd	r25, Y+7	; 0x07
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	69 f7       	brne	.-38     	; 0x598 <LCD_command+0x2b4>
 5be:	24 c0       	rjmp	.+72     	; 0x608 <LCD_command+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5c0:	68 85       	ldd	r22, Y+8	; 0x08
 5c2:	79 85       	ldd	r23, Y+9	; 0x09
 5c4:	8a 85       	ldd	r24, Y+10	; 0x0a
 5c6:	9b 85       	ldd	r25, Y+11	; 0x0b
 5c8:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 5cc:	dc 01       	movw	r26, r24
 5ce:	cb 01       	movw	r24, r22
 5d0:	9f 83       	std	Y+7, r25	; 0x07
 5d2:	8e 83       	std	Y+6, r24	; 0x06
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	9f 81       	ldd	r25, Y+7	; 0x07
 5d8:	9b 83       	std	Y+3, r25	; 0x03
 5da:	8a 83       	std	Y+2, r24	; 0x02
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	9b 81       	ldd	r25, Y+3	; 0x03
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_command+0x2fc>
 5e4:	9b 83       	std	Y+3, r25	; 0x03
 5e6:	8a 83       	std	Y+2, r24	; 0x02
 5e8:	0f c0       	rjmp	.+30     	; 0x608 <LCD_command+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 5ea:	69 89       	ldd	r22, Y+17	; 0x11
 5ec:	7a 89       	ldd	r23, Y+18	; 0x12
 5ee:	8b 89       	ldd	r24, Y+19	; 0x13
 5f0:	9c 89       	ldd	r25, Y+20	; 0x14
 5f2:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 5f6:	dc 01       	movw	r26, r24
 5f8:	cb 01       	movw	r24, r22
 5fa:	88 8b       	std	Y+16, r24	; 0x10
 5fc:	88 89       	ldd	r24, Y+16	; 0x10
 5fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	8a 95       	dec	r24
 604:	f1 f7       	brne	.-4      	; 0x602 <LCD_command+0x31e>
 606:	89 83       	std	Y+1, r24	; 0x01
	// enable을 high에서 low로 떨어져야 valid data   -동작 타이밍도 참고
	_delay_us(1); //명령 쓰기
	
}
 608:	e1 96       	adiw	r28, 0x31	; 49
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	cf 91       	pop	r28
 616:	df 91       	pop	r29
 618:	08 95       	ret

0000061a <LCD_data>:
// LCD 데이터 처리 함수
void LCD_data(unsigned char data)
{
 61a:	df 93       	push	r29
 61c:	cf 93       	push	r28
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	e1 97       	sbiw	r28, 0x31	; 49
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	89 ab       	std	Y+49, r24	; 0x31
	PORTG = 0x05;//E=1, RW=0, RS=1  LCD에 표시할 문자를 데이터레지스터에 쓰기
 630:	e5 e6       	ldi	r30, 0x65	; 101
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	85 e0       	ldi	r24, 0x05	; 5
 636:	80 83       	st	Z, r24
	PORTB = data;//데이터 값 전달
 638:	e8 e3       	ldi	r30, 0x38	; 56
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	89 a9       	ldd	r24, Y+49	; 0x31
 63e:	80 83       	st	Z, r24
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a0 e8       	ldi	r26, 0x80	; 128
 646:	bf e3       	ldi	r27, 0x3F	; 63
 648:	8d a7       	std	Y+45, r24	; 0x2d
 64a:	9e a7       	std	Y+46, r25	; 0x2e
 64c:	af a7       	std	Y+47, r26	; 0x2f
 64e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 650:	6d a5       	ldd	r22, Y+45	; 0x2d
 652:	7e a5       	ldd	r23, Y+46	; 0x2e
 654:	8f a5       	ldd	r24, Y+47	; 0x2f
 656:	98 a9       	ldd	r25, Y+48	; 0x30
 658:	2b ea       	ldi	r18, 0xAB	; 171
 65a:	3a ea       	ldi	r19, 0xAA	; 170
 65c:	4a ea       	ldi	r20, 0xAA	; 170
 65e:	5e e3       	ldi	r21, 0x3E	; 62
 660:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 664:	dc 01       	movw	r26, r24
 666:	cb 01       	movw	r24, r22
 668:	89 a7       	std	Y+41, r24	; 0x29
 66a:	9a a7       	std	Y+42, r25	; 0x2a
 66c:	ab a7       	std	Y+43, r26	; 0x2b
 66e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 670:	69 a5       	ldd	r22, Y+41	; 0x29
 672:	7a a5       	ldd	r23, Y+42	; 0x2a
 674:	8b a5       	ldd	r24, Y+43	; 0x2b
 676:	9c a5       	ldd	r25, Y+44	; 0x2c
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	40 e8       	ldi	r20, 0x80	; 128
 67e:	5f e3       	ldi	r21, 0x3F	; 63
 680:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 684:	88 23       	and	r24, r24
 686:	1c f4       	brge	.+6      	; 0x68e <LCD_data+0x74>
		__ticks = 1;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	88 a7       	std	Y+40, r24	; 0x28
 68c:	91 c0       	rjmp	.+290    	; 0x7b0 <LCD_data+0x196>
	else if (__tmp > 255)
 68e:	69 a5       	ldd	r22, Y+41	; 0x29
 690:	7a a5       	ldd	r23, Y+42	; 0x2a
 692:	8b a5       	ldd	r24, Y+43	; 0x2b
 694:	9c a5       	ldd	r25, Y+44	; 0x2c
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	4f e7       	ldi	r20, 0x7F	; 127
 69c:	53 e4       	ldi	r21, 0x43	; 67
 69e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 6a2:	18 16       	cp	r1, r24
 6a4:	0c f0       	brlt	.+2      	; 0x6a8 <LCD_data+0x8e>
 6a6:	7b c0       	rjmp	.+246    	; 0x79e <LCD_data+0x184>
	{
		_delay_ms(__us / 1000.0);
 6a8:	6d a5       	ldd	r22, Y+45	; 0x2d
 6aa:	7e a5       	ldd	r23, Y+46	; 0x2e
 6ac:	8f a5       	ldd	r24, Y+47	; 0x2f
 6ae:	98 a9       	ldd	r25, Y+48	; 0x30
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	4a e7       	ldi	r20, 0x7A	; 122
 6b6:	54 e4       	ldi	r21, 0x44	; 68
 6b8:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divsf3>
 6bc:	dc 01       	movw	r26, r24
 6be:	cb 01       	movw	r24, r22
 6c0:	8c a3       	std	Y+36, r24	; 0x24
 6c2:	9d a3       	std	Y+37, r25	; 0x25
 6c4:	ae a3       	std	Y+38, r26	; 0x26
 6c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 6c8:	6c a1       	ldd	r22, Y+36	; 0x24
 6ca:	7d a1       	ldd	r23, Y+37	; 0x25
 6cc:	8e a1       	ldd	r24, Y+38	; 0x26
 6ce:	9f a1       	ldd	r25, Y+39	; 0x27
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	4a e7       	ldi	r20, 0x7A	; 122
 6d6:	53 e4       	ldi	r21, 0x43	; 67
 6d8:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 6dc:	dc 01       	movw	r26, r24
 6de:	cb 01       	movw	r24, r22
 6e0:	88 a3       	std	Y+32, r24	; 0x20
 6e2:	99 a3       	std	Y+33, r25	; 0x21
 6e4:	aa a3       	std	Y+34, r26	; 0x22
 6e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
 6e8:	68 a1       	ldd	r22, Y+32	; 0x20
 6ea:	79 a1       	ldd	r23, Y+33	; 0x21
 6ec:	8a a1       	ldd	r24, Y+34	; 0x22
 6ee:	9b a1       	ldd	r25, Y+35	; 0x23
 6f0:	20 e0       	ldi	r18, 0x00	; 0
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	40 e8       	ldi	r20, 0x80	; 128
 6f6:	5f e3       	ldi	r21, 0x3F	; 63
 6f8:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 6fc:	88 23       	and	r24, r24
 6fe:	2c f4       	brge	.+10     	; 0x70a <LCD_data+0xf0>
		__ticks = 1;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	9f 8f       	std	Y+31, r25	; 0x1f
 706:	8e 8f       	std	Y+30, r24	; 0x1e
 708:	3f c0       	rjmp	.+126    	; 0x788 <LCD_data+0x16e>
	else if (__tmp > 65535)
 70a:	68 a1       	ldd	r22, Y+32	; 0x20
 70c:	79 a1       	ldd	r23, Y+33	; 0x21
 70e:	8a a1       	ldd	r24, Y+34	; 0x22
 710:	9b a1       	ldd	r25, Y+35	; 0x23
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	3f ef       	ldi	r19, 0xFF	; 255
 716:	4f e7       	ldi	r20, 0x7F	; 127
 718:	57 e4       	ldi	r21, 0x47	; 71
 71a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 71e:	18 16       	cp	r1, r24
 720:	4c f5       	brge	.+82     	; 0x774 <LCD_data+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 722:	6c a1       	ldd	r22, Y+36	; 0x24
 724:	7d a1       	ldd	r23, Y+37	; 0x25
 726:	8e a1       	ldd	r24, Y+38	; 0x26
 728:	9f a1       	ldd	r25, Y+39	; 0x27
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	40 e2       	ldi	r20, 0x20	; 32
 730:	51 e4       	ldi	r21, 0x41	; 65
 732:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 736:	dc 01       	movw	r26, r24
 738:	cb 01       	movw	r24, r22
 73a:	bc 01       	movw	r22, r24
 73c:	cd 01       	movw	r24, r26
 73e:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 742:	dc 01       	movw	r26, r24
 744:	cb 01       	movw	r24, r22
 746:	9f 8f       	std	Y+31, r25	; 0x1f
 748:	8e 8f       	std	Y+30, r24	; 0x1e
 74a:	0f c0       	rjmp	.+30     	; 0x76a <LCD_data+0x150>
 74c:	89 e1       	ldi	r24, 0x19	; 25
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	9d 8f       	std	Y+29, r25	; 0x1d
 752:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 754:	8c 8d       	ldd	r24, Y+28	; 0x1c
 756:	9d 8d       	ldd	r25, Y+29	; 0x1d
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_data+0x13e>
 75c:	9d 8f       	std	Y+29, r25	; 0x1d
 75e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 760:	8e 8d       	ldd	r24, Y+30	; 0x1e
 762:	9f 8d       	ldd	r25, Y+31	; 0x1f
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	9f 8f       	std	Y+31, r25	; 0x1f
 768:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 76a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 76c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	69 f7       	brne	.-38     	; 0x74c <LCD_data+0x132>
 772:	24 c0       	rjmp	.+72     	; 0x7bc <LCD_data+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 774:	68 a1       	ldd	r22, Y+32	; 0x20
 776:	79 a1       	ldd	r23, Y+33	; 0x21
 778:	8a a1       	ldd	r24, Y+34	; 0x22
 77a:	9b a1       	ldd	r25, Y+35	; 0x23
 77c:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	9f 8f       	std	Y+31, r25	; 0x1f
 786:	8e 8f       	std	Y+30, r24	; 0x1e
 788:	8e 8d       	ldd	r24, Y+30	; 0x1e
 78a:	9f 8d       	ldd	r25, Y+31	; 0x1f
 78c:	9b 8f       	std	Y+27, r25	; 0x1b
 78e:	8a 8f       	std	Y+26, r24	; 0x1a
 790:	8a 8d       	ldd	r24, Y+26	; 0x1a
 792:	9b 8d       	ldd	r25, Y+27	; 0x1b
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <LCD_data+0x17a>
 798:	9b 8f       	std	Y+27, r25	; 0x1b
 79a:	8a 8f       	std	Y+26, r24	; 0x1a
 79c:	0f c0       	rjmp	.+30     	; 0x7bc <LCD_data+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 79e:	69 a5       	ldd	r22, Y+41	; 0x29
 7a0:	7a a5       	ldd	r23, Y+42	; 0x2a
 7a2:	8b a5       	ldd	r24, Y+43	; 0x2b
 7a4:	9c a5       	ldd	r25, Y+44	; 0x2c
 7a6:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 7aa:	dc 01       	movw	r26, r24
 7ac:	cb 01       	movw	r24, r22
 7ae:	88 a7       	std	Y+40, r24	; 0x28
 7b0:	88 a5       	ldd	r24, Y+40	; 0x28
 7b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7b4:	89 8d       	ldd	r24, Y+25	; 0x19
 7b6:	8a 95       	dec	r24
 7b8:	f1 f7       	brne	.-4      	; 0x7b6 <LCD_data+0x19c>
 7ba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	PORTG = 0x01;//E=0, RW=0, RS=1 LCD 데이터 처리신호 high->low
 7bc:	e5 e6       	ldi	r30, 0x65	; 101
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 83       	st	Z, r24
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	a0 e8       	ldi	r26, 0x80	; 128
 7ca:	bf e3       	ldi	r27, 0x3F	; 63
 7cc:	8d 8b       	std	Y+21, r24	; 0x15
 7ce:	9e 8b       	std	Y+22, r25	; 0x16
 7d0:	af 8b       	std	Y+23, r26	; 0x17
 7d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 7d4:	6d 89       	ldd	r22, Y+21	; 0x15
 7d6:	7e 89       	ldd	r23, Y+22	; 0x16
 7d8:	8f 89       	ldd	r24, Y+23	; 0x17
 7da:	98 8d       	ldd	r25, Y+24	; 0x18
 7dc:	2b ea       	ldi	r18, 0xAB	; 171
 7de:	3a ea       	ldi	r19, 0xAA	; 170
 7e0:	4a ea       	ldi	r20, 0xAA	; 170
 7e2:	5e e3       	ldi	r21, 0x3E	; 62
 7e4:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 7e8:	dc 01       	movw	r26, r24
 7ea:	cb 01       	movw	r24, r22
 7ec:	89 8b       	std	Y+17, r24	; 0x11
 7ee:	9a 8b       	std	Y+18, r25	; 0x12
 7f0:	ab 8b       	std	Y+19, r26	; 0x13
 7f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 7f4:	69 89       	ldd	r22, Y+17	; 0x11
 7f6:	7a 89       	ldd	r23, Y+18	; 0x12
 7f8:	8b 89       	ldd	r24, Y+19	; 0x13
 7fa:	9c 89       	ldd	r25, Y+20	; 0x14
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	40 e8       	ldi	r20, 0x80	; 128
 802:	5f e3       	ldi	r21, 0x3F	; 63
 804:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 808:	88 23       	and	r24, r24
 80a:	1c f4       	brge	.+6      	; 0x812 <LCD_data+0x1f8>
		__ticks = 1;
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	88 8b       	std	Y+16, r24	; 0x10
 810:	91 c0       	rjmp	.+290    	; 0x934 <LCD_data+0x31a>
	else if (__tmp > 255)
 812:	69 89       	ldd	r22, Y+17	; 0x11
 814:	7a 89       	ldd	r23, Y+18	; 0x12
 816:	8b 89       	ldd	r24, Y+19	; 0x13
 818:	9c 89       	ldd	r25, Y+20	; 0x14
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	4f e7       	ldi	r20, 0x7F	; 127
 820:	53 e4       	ldi	r21, 0x43	; 67
 822:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 826:	18 16       	cp	r1, r24
 828:	0c f0       	brlt	.+2      	; 0x82c <LCD_data+0x212>
 82a:	7b c0       	rjmp	.+246    	; 0x922 <LCD_data+0x308>
	{
		_delay_ms(__us / 1000.0);
 82c:	6d 89       	ldd	r22, Y+21	; 0x15
 82e:	7e 89       	ldd	r23, Y+22	; 0x16
 830:	8f 89       	ldd	r24, Y+23	; 0x17
 832:	98 8d       	ldd	r25, Y+24	; 0x18
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	4a e7       	ldi	r20, 0x7A	; 122
 83a:	54 e4       	ldi	r21, 0x44	; 68
 83c:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divsf3>
 840:	dc 01       	movw	r26, r24
 842:	cb 01       	movw	r24, r22
 844:	8c 87       	std	Y+12, r24	; 0x0c
 846:	9d 87       	std	Y+13, r25	; 0x0d
 848:	ae 87       	std	Y+14, r26	; 0x0e
 84a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 84c:	6c 85       	ldd	r22, Y+12	; 0x0c
 84e:	7d 85       	ldd	r23, Y+13	; 0x0d
 850:	8e 85       	ldd	r24, Y+14	; 0x0e
 852:	9f 85       	ldd	r25, Y+15	; 0x0f
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	4a e7       	ldi	r20, 0x7A	; 122
 85a:	53 e4       	ldi	r21, 0x43	; 67
 85c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 860:	dc 01       	movw	r26, r24
 862:	cb 01       	movw	r24, r22
 864:	88 87       	std	Y+8, r24	; 0x08
 866:	99 87       	std	Y+9, r25	; 0x09
 868:	aa 87       	std	Y+10, r26	; 0x0a
 86a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 86c:	68 85       	ldd	r22, Y+8	; 0x08
 86e:	79 85       	ldd	r23, Y+9	; 0x09
 870:	8a 85       	ldd	r24, Y+10	; 0x0a
 872:	9b 85       	ldd	r25, Y+11	; 0x0b
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e8       	ldi	r20, 0x80	; 128
 87a:	5f e3       	ldi	r21, 0x3F	; 63
 87c:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 880:	88 23       	and	r24, r24
 882:	2c f4       	brge	.+10     	; 0x88e <LCD_data+0x274>
		__ticks = 1;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	9f 83       	std	Y+7, r25	; 0x07
 88a:	8e 83       	std	Y+6, r24	; 0x06
 88c:	3f c0       	rjmp	.+126    	; 0x90c <LCD_data+0x2f2>
	else if (__tmp > 65535)
 88e:	68 85       	ldd	r22, Y+8	; 0x08
 890:	79 85       	ldd	r23, Y+9	; 0x09
 892:	8a 85       	ldd	r24, Y+10	; 0x0a
 894:	9b 85       	ldd	r25, Y+11	; 0x0b
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	3f ef       	ldi	r19, 0xFF	; 255
 89a:	4f e7       	ldi	r20, 0x7F	; 127
 89c:	57 e4       	ldi	r21, 0x47	; 71
 89e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 8a2:	18 16       	cp	r1, r24
 8a4:	4c f5       	brge	.+82     	; 0x8f8 <LCD_data+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8a6:	6c 85       	ldd	r22, Y+12	; 0x0c
 8a8:	7d 85       	ldd	r23, Y+13	; 0x0d
 8aa:	8e 85       	ldd	r24, Y+14	; 0x0e
 8ac:	9f 85       	ldd	r25, Y+15	; 0x0f
 8ae:	20 e0       	ldi	r18, 0x00	; 0
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	40 e2       	ldi	r20, 0x20	; 32
 8b4:	51 e4       	ldi	r21, 0x41	; 65
 8b6:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 8ba:	dc 01       	movw	r26, r24
 8bc:	cb 01       	movw	r24, r22
 8be:	bc 01       	movw	r22, r24
 8c0:	cd 01       	movw	r24, r26
 8c2:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 8c6:	dc 01       	movw	r26, r24
 8c8:	cb 01       	movw	r24, r22
 8ca:	9f 83       	std	Y+7, r25	; 0x07
 8cc:	8e 83       	std	Y+6, r24	; 0x06
 8ce:	0f c0       	rjmp	.+30     	; 0x8ee <LCD_data+0x2d4>
 8d0:	89 e1       	ldi	r24, 0x19	; 25
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	9d 83       	std	Y+5, r25	; 0x05
 8d6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8d8:	8c 81       	ldd	r24, Y+4	; 0x04
 8da:	9d 81       	ldd	r25, Y+5	; 0x05
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <LCD_data+0x2c2>
 8e0:	9d 83       	std	Y+5, r25	; 0x05
 8e2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8e4:	8e 81       	ldd	r24, Y+6	; 0x06
 8e6:	9f 81       	ldd	r25, Y+7	; 0x07
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	9f 83       	std	Y+7, r25	; 0x07
 8ec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8ee:	8e 81       	ldd	r24, Y+6	; 0x06
 8f0:	9f 81       	ldd	r25, Y+7	; 0x07
 8f2:	00 97       	sbiw	r24, 0x00	; 0
 8f4:	69 f7       	brne	.-38     	; 0x8d0 <LCD_data+0x2b6>
 8f6:	24 c0       	rjmp	.+72     	; 0x940 <LCD_data+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8f8:	68 85       	ldd	r22, Y+8	; 0x08
 8fa:	79 85       	ldd	r23, Y+9	; 0x09
 8fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 8fe:	9b 85       	ldd	r25, Y+11	; 0x0b
 900:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 904:	dc 01       	movw	r26, r24
 906:	cb 01       	movw	r24, r22
 908:	9f 83       	std	Y+7, r25	; 0x07
 90a:	8e 83       	std	Y+6, r24	; 0x06
 90c:	8e 81       	ldd	r24, Y+6	; 0x06
 90e:	9f 81       	ldd	r25, Y+7	; 0x07
 910:	9b 83       	std	Y+3, r25	; 0x03
 912:	8a 83       	std	Y+2, r24	; 0x02
 914:	8a 81       	ldd	r24, Y+2	; 0x02
 916:	9b 81       	ldd	r25, Y+3	; 0x03
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_data+0x2fe>
 91c:	9b 83       	std	Y+3, r25	; 0x03
 91e:	8a 83       	std	Y+2, r24	; 0x02
 920:	0f c0       	rjmp	.+30     	; 0x940 <LCD_data+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 922:	69 89       	ldd	r22, Y+17	; 0x11
 924:	7a 89       	ldd	r23, Y+18	; 0x12
 926:	8b 89       	ldd	r24, Y+19	; 0x13
 928:	9c 89       	ldd	r25, Y+20	; 0x14
 92a:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 92e:	dc 01       	movw	r26, r24
 930:	cb 01       	movw	r24, r22
 932:	88 8b       	std	Y+16, r24	; 0x10
 934:	88 89       	ldd	r24, Y+16	; 0x10
 936:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	8a 95       	dec	r24
 93c:	f1 f7       	brne	.-4      	; 0x93a <LCD_data+0x320>
 93e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
 940:	e1 96       	adiw	r28, 0x31	; 49
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	cf 91       	pop	r28
 94e:	df 91       	pop	r29
 950:	08 95       	ret

00000952 <LCD_string>:

// 문자열 처리 함수
void LCD_string(unsigned char cmd, unsigned char *str)
{
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	00 d0       	rcall	.+0      	; 0x958 <LCD_string+0x6>
 958:	0f 92       	push	r0
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	7b 83       	std	Y+3, r23	; 0x03
 962:	6a 83       	std	Y+2, r22	; 0x02
	//문자열 출력 위치 명령 전달
	LCD_command(cmd);
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_command>
 96a:	0a c0       	rjmp	.+20     	; 0x980 <LCD_string+0x2e>
	// 문자열 마지막 null에서 루프 종료
	while (*str != '\0')
	{
		LCD_data(*str);
 96c:	ea 81       	ldd	r30, Y+2	; 0x02
 96e:	fb 81       	ldd	r31, Y+3	; 0x03
 970:	80 81       	ld	r24, Z
 972:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_data>
		str++;
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	9b 81       	ldd	r25, Y+3	; 0x03
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	9b 83       	std	Y+3, r25	; 0x03
 97e:	8a 83       	std	Y+2, r24	; 0x02
void LCD_string(unsigned char cmd, unsigned char *str)
{
	//문자열 출력 위치 명령 전달
	LCD_command(cmd);
	// 문자열 마지막 null에서 루프 종료
	while (*str != '\0')
 980:	ea 81       	ldd	r30, Y+2	; 0x02
 982:	fb 81       	ldd	r31, Y+3	; 0x03
 984:	80 81       	ld	r24, Z
 986:	88 23       	and	r24, r24
 988:	89 f7       	brne	.-30     	; 0x96c <LCD_string+0x1a>
	{
		LCD_data(*str);
		str++;
	}
}
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <main>:

// ***********************************************************
// Main program
//
int main(void) {
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	af 97       	sbiw	r28, 0x2f	; 47
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
 9aa:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_init>
	
	unsigned char str1[] ="LCD display";
 9ae:	ce 01       	movw	r24, r28
 9b0:	0f 96       	adiw	r24, 0x0f	; 15
 9b2:	9f a3       	std	Y+39, r25	; 0x27
 9b4:	8e a3       	std	Y+38, r24	; 0x26
 9b6:	e0 e0       	ldi	r30, 0x00	; 0
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
 9ba:	f9 a7       	std	Y+41, r31	; 0x29
 9bc:	e8 a7       	std	Y+40, r30	; 0x28
 9be:	fc e0       	ldi	r31, 0x0C	; 12
 9c0:	fa a7       	std	Y+42, r31	; 0x2a
 9c2:	e8 a5       	ldd	r30, Y+40	; 0x28
 9c4:	f9 a5       	ldd	r31, Y+41	; 0x29
 9c6:	00 80       	ld	r0, Z
 9c8:	88 a5       	ldd	r24, Y+40	; 0x28
 9ca:	99 a5       	ldd	r25, Y+41	; 0x29
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	99 a7       	std	Y+41, r25	; 0x29
 9d0:	88 a7       	std	Y+40, r24	; 0x28
 9d2:	ee a1       	ldd	r30, Y+38	; 0x26
 9d4:	ff a1       	ldd	r31, Y+39	; 0x27
 9d6:	00 82       	st	Z, r0
 9d8:	8e a1       	ldd	r24, Y+38	; 0x26
 9da:	9f a1       	ldd	r25, Y+39	; 0x27
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	9f a3       	std	Y+39, r25	; 0x27
 9e0:	8e a3       	std	Y+38, r24	; 0x26
 9e2:	9a a5       	ldd	r25, Y+42	; 0x2a
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	9a a7       	std	Y+42, r25	; 0x2a
 9e8:	ea a5       	ldd	r30, Y+42	; 0x2a
 9ea:	ee 23       	and	r30, r30
 9ec:	51 f7       	brne	.-44     	; 0x9c2 <main+0x2c>
	unsigned char str2[] = "  Example ";
 9ee:	ce 01       	movw	r24, r28
 9f0:	4b 96       	adiw	r24, 0x1b	; 27
 9f2:	9c a7       	std	Y+44, r25	; 0x2c
 9f4:	8b a7       	std	Y+43, r24	; 0x2b
 9f6:	ec e0       	ldi	r30, 0x0C	; 12
 9f8:	f1 e0       	ldi	r31, 0x01	; 1
 9fa:	fe a7       	std	Y+46, r31	; 0x2e
 9fc:	ed a7       	std	Y+45, r30	; 0x2d
 9fe:	fb e0       	ldi	r31, 0x0B	; 11
 a00:	ff a7       	std	Y+47, r31	; 0x2f
 a02:	ed a5       	ldd	r30, Y+45	; 0x2d
 a04:	fe a5       	ldd	r31, Y+46	; 0x2e
 a06:	00 80       	ld	r0, Z
 a08:	8d a5       	ldd	r24, Y+45	; 0x2d
 a0a:	9e a5       	ldd	r25, Y+46	; 0x2e
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9e a7       	std	Y+46, r25	; 0x2e
 a10:	8d a7       	std	Y+45, r24	; 0x2d
 a12:	eb a5       	ldd	r30, Y+43	; 0x2b
 a14:	fc a5       	ldd	r31, Y+44	; 0x2c
 a16:	00 82       	st	Z, r0
 a18:	8b a5       	ldd	r24, Y+43	; 0x2b
 a1a:	9c a5       	ldd	r25, Y+44	; 0x2c
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	9c a7       	std	Y+44, r25	; 0x2c
 a20:	8b a7       	std	Y+43, r24	; 0x2b
 a22:	9f a5       	ldd	r25, Y+47	; 0x2f
 a24:	91 50       	subi	r25, 0x01	; 1
 a26:	9f a7       	std	Y+47, r25	; 0x2f
 a28:	ef a5       	ldd	r30, Y+47	; 0x2f
 a2a:	ee 23       	and	r30, r30
 a2c:	51 f7       	brne	.-44     	; 0xa02 <main+0x6c>
	while (1)
	{
		LCD_string(0x80, str1);// 첫째줄 0x80부터 시작
 a2e:	9e 01       	movw	r18, r28
 a30:	21 5f       	subi	r18, 0xF1	; 241
 a32:	3f 4f       	sbci	r19, 0xFF	; 255
 a34:	80 e8       	ldi	r24, 0x80	; 128
 a36:	b9 01       	movw	r22, r18
 a38:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_string>
		LCD_string(0xC0, str2);// 둘째줄 0xC0부터 시
 a3c:	9e 01       	movw	r18, r28
 a3e:	25 5e       	subi	r18, 0xE5	; 229
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	80 ec       	ldi	r24, 0xC0	; 192
 a44:	b9 01       	movw	r22, r18
 a46:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_string>
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	a8 ec       	ldi	r26, 0xC8	; 200
 a50:	b2 e4       	ldi	r27, 0x42	; 66
 a52:	8b 87       	std	Y+11, r24	; 0x0b
 a54:	9c 87       	std	Y+12, r25	; 0x0c
 a56:	ad 87       	std	Y+13, r26	; 0x0d
 a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
 a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
 a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
 a60:	9e 85       	ldd	r25, Y+14	; 0x0e
 a62:	20 e0       	ldi	r18, 0x00	; 0
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	4a e7       	ldi	r20, 0x7A	; 122
 a68:	53 e4       	ldi	r21, 0x43	; 67
 a6a:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 a6e:	dc 01       	movw	r26, r24
 a70:	cb 01       	movw	r24, r22
 a72:	8f 83       	std	Y+7, r24	; 0x07
 a74:	98 87       	std	Y+8, r25	; 0x08
 a76:	a9 87       	std	Y+9, r26	; 0x09
 a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 a7a:	6f 81       	ldd	r22, Y+7	; 0x07
 a7c:	78 85       	ldd	r23, Y+8	; 0x08
 a7e:	89 85       	ldd	r24, Y+9	; 0x09
 a80:	9a 85       	ldd	r25, Y+10	; 0x0a
 a82:	20 e0       	ldi	r18, 0x00	; 0
 a84:	30 e0       	ldi	r19, 0x00	; 0
 a86:	40 e8       	ldi	r20, 0x80	; 128
 a88:	5f e3       	ldi	r21, 0x3F	; 63
 a8a:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpsf2>
 a8e:	88 23       	and	r24, r24
 a90:	2c f4       	brge	.+10     	; 0xa9c <main+0x106>
		__ticks = 1;
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	9e 83       	std	Y+6, r25	; 0x06
 a98:	8d 83       	std	Y+5, r24	; 0x05
 a9a:	3f c0       	rjmp	.+126    	; 0xb1a <main+0x184>
	else if (__tmp > 65535)
 a9c:	6f 81       	ldd	r22, Y+7	; 0x07
 a9e:	78 85       	ldd	r23, Y+8	; 0x08
 aa0:	89 85       	ldd	r24, Y+9	; 0x09
 aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
 aa4:	20 e0       	ldi	r18, 0x00	; 0
 aa6:	3f ef       	ldi	r19, 0xFF	; 255
 aa8:	4f e7       	ldi	r20, 0x7F	; 127
 aaa:	57 e4       	ldi	r21, 0x47	; 71
 aac:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 ab0:	18 16       	cp	r1, r24
 ab2:	4c f5       	brge	.+82     	; 0xb06 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
 ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
 ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
 aba:	9e 85       	ldd	r25, Y+14	; 0x0e
 abc:	20 e0       	ldi	r18, 0x00	; 0
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	40 e2       	ldi	r20, 0x20	; 32
 ac2:	51 e4       	ldi	r21, 0x41	; 65
 ac4:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsf3>
 ac8:	dc 01       	movw	r26, r24
 aca:	cb 01       	movw	r24, r22
 acc:	bc 01       	movw	r22, r24
 ace:	cd 01       	movw	r24, r26
 ad0:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 ad4:	dc 01       	movw	r26, r24
 ad6:	cb 01       	movw	r24, r22
 ad8:	9e 83       	std	Y+6, r25	; 0x06
 ada:	8d 83       	std	Y+5, r24	; 0x05
 adc:	0f c0       	rjmp	.+30     	; 0xafc <main+0x166>
 ade:	89 e1       	ldi	r24, 0x19	; 25
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	9c 83       	std	Y+4, r25	; 0x04
 ae4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	9c 81       	ldd	r25, Y+4	; 0x04
 aea:	01 97       	sbiw	r24, 0x01	; 1
 aec:	f1 f7       	brne	.-4      	; 0xaea <main+0x154>
 aee:	9c 83       	std	Y+4, r25	; 0x04
 af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 af2:	8d 81       	ldd	r24, Y+5	; 0x05
 af4:	9e 81       	ldd	r25, Y+6	; 0x06
 af6:	01 97       	sbiw	r24, 0x01	; 1
 af8:	9e 83       	std	Y+6, r25	; 0x06
 afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 afc:	8d 81       	ldd	r24, Y+5	; 0x05
 afe:	9e 81       	ldd	r25, Y+6	; 0x06
 b00:	00 97       	sbiw	r24, 0x00	; 0
 b02:	69 f7       	brne	.-38     	; 0xade <main+0x148>
 b04:	94 cf       	rjmp	.-216    	; 0xa2e <main+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b06:	6f 81       	ldd	r22, Y+7	; 0x07
 b08:	78 85       	ldd	r23, Y+8	; 0x08
 b0a:	89 85       	ldd	r24, Y+9	; 0x09
 b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
 b0e:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 b12:	dc 01       	movw	r26, r24
 b14:	cb 01       	movw	r24, r22
 b16:	9e 83       	std	Y+6, r25	; 0x06
 b18:	8d 83       	std	Y+5, r24	; 0x05
 b1a:	8d 81       	ldd	r24, Y+5	; 0x05
 b1c:	9e 81       	ldd	r25, Y+6	; 0x06
 b1e:	9a 83       	std	Y+2, r25	; 0x02
 b20:	89 83       	std	Y+1, r24	; 0x01
 b22:	89 81       	ldd	r24, Y+1	; 0x01
 b24:	9a 81       	ldd	r25, Y+2	; 0x02
 b26:	01 97       	sbiw	r24, 0x01	; 1
 b28:	f1 f7       	brne	.-4      	; 0xb26 <main+0x190>
 b2a:	9a 83       	std	Y+2, r25	; 0x02
 b2c:	89 83       	std	Y+1, r24	; 0x01
 b2e:	7f cf       	rjmp	.-258    	; 0xa2e <main+0x98>

00000b30 <__cmpsf2>:
 b30:	97 d0       	rcall	.+302    	; 0xc60 <__fp_cmp>
 b32:	08 f4       	brcc	.+2      	; 0xb36 <__cmpsf2+0x6>
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	08 95       	ret

00000b38 <__divsf3>:
 b38:	0c d0       	rcall	.+24     	; 0xb52 <__divsf3x>
 b3a:	cd c0       	rjmp	.+410    	; 0xcd6 <__fp_round>
 b3c:	c5 d0       	rcall	.+394    	; 0xcc8 <__fp_pscB>
 b3e:	40 f0       	brcs	.+16     	; 0xb50 <__divsf3+0x18>
 b40:	bc d0       	rcall	.+376    	; 0xcba <__fp_pscA>
 b42:	30 f0       	brcs	.+12     	; 0xb50 <__divsf3+0x18>
 b44:	21 f4       	brne	.+8      	; 0xb4e <__divsf3+0x16>
 b46:	5f 3f       	cpi	r21, 0xFF	; 255
 b48:	19 f0       	breq	.+6      	; 0xb50 <__divsf3+0x18>
 b4a:	ae c0       	rjmp	.+348    	; 0xca8 <__fp_inf>
 b4c:	51 11       	cpse	r21, r1
 b4e:	f7 c0       	rjmp	.+494    	; 0xd3e <__fp_szero>
 b50:	b1 c0       	rjmp	.+354    	; 0xcb4 <__fp_nan>

00000b52 <__divsf3x>:
 b52:	d2 d0       	rcall	.+420    	; 0xcf8 <__fp_split3>
 b54:	98 f3       	brcs	.-26     	; 0xb3c <__divsf3+0x4>

00000b56 <__divsf3_pse>:
 b56:	99 23       	and	r25, r25
 b58:	c9 f3       	breq	.-14     	; 0xb4c <__divsf3+0x14>
 b5a:	55 23       	and	r21, r21
 b5c:	b1 f3       	breq	.-20     	; 0xb4a <__divsf3+0x12>
 b5e:	95 1b       	sub	r25, r21
 b60:	55 0b       	sbc	r21, r21
 b62:	bb 27       	eor	r27, r27
 b64:	aa 27       	eor	r26, r26
 b66:	62 17       	cp	r22, r18
 b68:	73 07       	cpc	r23, r19
 b6a:	84 07       	cpc	r24, r20
 b6c:	38 f0       	brcs	.+14     	; 0xb7c <__divsf3_pse+0x26>
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	5f 4f       	sbci	r21, 0xFF	; 255
 b72:	22 0f       	add	r18, r18
 b74:	33 1f       	adc	r19, r19
 b76:	44 1f       	adc	r20, r20
 b78:	aa 1f       	adc	r26, r26
 b7a:	a9 f3       	breq	.-22     	; 0xb66 <__divsf3_pse+0x10>
 b7c:	33 d0       	rcall	.+102    	; 0xbe4 <__divsf3_pse+0x8e>
 b7e:	0e 2e       	mov	r0, r30
 b80:	3a f0       	brmi	.+14     	; 0xb90 <__divsf3_pse+0x3a>
 b82:	e0 e8       	ldi	r30, 0x80	; 128
 b84:	30 d0       	rcall	.+96     	; 0xbe6 <__divsf3_pse+0x90>
 b86:	91 50       	subi	r25, 0x01	; 1
 b88:	50 40       	sbci	r21, 0x00	; 0
 b8a:	e6 95       	lsr	r30
 b8c:	00 1c       	adc	r0, r0
 b8e:	ca f7       	brpl	.-14     	; 0xb82 <__divsf3_pse+0x2c>
 b90:	29 d0       	rcall	.+82     	; 0xbe4 <__divsf3_pse+0x8e>
 b92:	fe 2f       	mov	r31, r30
 b94:	27 d0       	rcall	.+78     	; 0xbe4 <__divsf3_pse+0x8e>
 b96:	66 0f       	add	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	bb 1f       	adc	r27, r27
 b9e:	26 17       	cp	r18, r22
 ba0:	37 07       	cpc	r19, r23
 ba2:	48 07       	cpc	r20, r24
 ba4:	ab 07       	cpc	r26, r27
 ba6:	b0 e8       	ldi	r27, 0x80	; 128
 ba8:	09 f0       	breq	.+2      	; 0xbac <__divsf3_pse+0x56>
 baa:	bb 0b       	sbc	r27, r27
 bac:	80 2d       	mov	r24, r0
 bae:	bf 01       	movw	r22, r30
 bb0:	ff 27       	eor	r31, r31
 bb2:	93 58       	subi	r25, 0x83	; 131
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__divsf3_pse+0x6c>
 bb8:	9e 3f       	cpi	r25, 0xFE	; 254
 bba:	51 05       	cpc	r21, r1
 bbc:	68 f0       	brcs	.+26     	; 0xbd8 <__divsf3_pse+0x82>
 bbe:	74 c0       	rjmp	.+232    	; 0xca8 <__fp_inf>
 bc0:	be c0       	rjmp	.+380    	; 0xd3e <__fp_szero>
 bc2:	5f 3f       	cpi	r21, 0xFF	; 255
 bc4:	ec f3       	brlt	.-6      	; 0xbc0 <__divsf3_pse+0x6a>
 bc6:	98 3e       	cpi	r25, 0xE8	; 232
 bc8:	dc f3       	brlt	.-10     	; 0xbc0 <__divsf3_pse+0x6a>
 bca:	86 95       	lsr	r24
 bcc:	77 95       	ror	r23
 bce:	67 95       	ror	r22
 bd0:	b7 95       	ror	r27
 bd2:	f7 95       	ror	r31
 bd4:	9f 5f       	subi	r25, 0xFF	; 255
 bd6:	c9 f7       	brne	.-14     	; 0xbca <__divsf3_pse+0x74>
 bd8:	88 0f       	add	r24, r24
 bda:	91 1d       	adc	r25, r1
 bdc:	96 95       	lsr	r25
 bde:	87 95       	ror	r24
 be0:	97 f9       	bld	r25, 7
 be2:	08 95       	ret
 be4:	e1 e0       	ldi	r30, 0x01	; 1
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	bb 1f       	adc	r27, r27
 bee:	62 17       	cp	r22, r18
 bf0:	73 07       	cpc	r23, r19
 bf2:	84 07       	cpc	r24, r20
 bf4:	ba 07       	cpc	r27, r26
 bf6:	20 f0       	brcs	.+8      	; 0xc00 <__divsf3_pse+0xaa>
 bf8:	62 1b       	sub	r22, r18
 bfa:	73 0b       	sbc	r23, r19
 bfc:	84 0b       	sbc	r24, r20
 bfe:	ba 0b       	sbc	r27, r26
 c00:	ee 1f       	adc	r30, r30
 c02:	88 f7       	brcc	.-30     	; 0xbe6 <__divsf3_pse+0x90>
 c04:	e0 95       	com	r30
 c06:	08 95       	ret

00000c08 <__fixunssfsi>:
 c08:	7f d0       	rcall	.+254    	; 0xd08 <__fp_splitA>
 c0a:	88 f0       	brcs	.+34     	; 0xc2e <__fixunssfsi+0x26>
 c0c:	9f 57       	subi	r25, 0x7F	; 127
 c0e:	90 f0       	brcs	.+36     	; 0xc34 <__fixunssfsi+0x2c>
 c10:	b9 2f       	mov	r27, r25
 c12:	99 27       	eor	r25, r25
 c14:	b7 51       	subi	r27, 0x17	; 23
 c16:	a0 f0       	brcs	.+40     	; 0xc40 <__fixunssfsi+0x38>
 c18:	d1 f0       	breq	.+52     	; 0xc4e <__fixunssfsi+0x46>
 c1a:	66 0f       	add	r22, r22
 c1c:	77 1f       	adc	r23, r23
 c1e:	88 1f       	adc	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	1a f0       	brmi	.+6      	; 0xc2a <__fixunssfsi+0x22>
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__fixunssfsi+0x12>
 c28:	12 c0       	rjmp	.+36     	; 0xc4e <__fixunssfsi+0x46>
 c2a:	b1 30       	cpi	r27, 0x01	; 1
 c2c:	81 f0       	breq	.+32     	; 0xc4e <__fixunssfsi+0x46>
 c2e:	86 d0       	rcall	.+268    	; 0xd3c <__fp_zero>
 c30:	b1 e0       	ldi	r27, 0x01	; 1
 c32:	08 95       	ret
 c34:	83 c0       	rjmp	.+262    	; 0xd3c <__fp_zero>
 c36:	67 2f       	mov	r22, r23
 c38:	78 2f       	mov	r23, r24
 c3a:	88 27       	eor	r24, r24
 c3c:	b8 5f       	subi	r27, 0xF8	; 248
 c3e:	39 f0       	breq	.+14     	; 0xc4e <__fixunssfsi+0x46>
 c40:	b9 3f       	cpi	r27, 0xF9	; 249
 c42:	cc f3       	brlt	.-14     	; 0xc36 <__fixunssfsi+0x2e>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b3 95       	inc	r27
 c4c:	d9 f7       	brne	.-10     	; 0xc44 <__fixunssfsi+0x3c>
 c4e:	3e f4       	brtc	.+14     	; 0xc5e <__fixunssfsi+0x56>
 c50:	90 95       	com	r25
 c52:	80 95       	com	r24
 c54:	70 95       	com	r23
 c56:	61 95       	neg	r22
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__fp_cmp>:
 c60:	99 0f       	add	r25, r25
 c62:	00 08       	sbc	r0, r0
 c64:	55 0f       	add	r21, r21
 c66:	aa 0b       	sbc	r26, r26
 c68:	e0 e8       	ldi	r30, 0x80	; 128
 c6a:	fe ef       	ldi	r31, 0xFE	; 254
 c6c:	16 16       	cp	r1, r22
 c6e:	17 06       	cpc	r1, r23
 c70:	e8 07       	cpc	r30, r24
 c72:	f9 07       	cpc	r31, r25
 c74:	c0 f0       	brcs	.+48     	; 0xca6 <__fp_cmp+0x46>
 c76:	12 16       	cp	r1, r18
 c78:	13 06       	cpc	r1, r19
 c7a:	e4 07       	cpc	r30, r20
 c7c:	f5 07       	cpc	r31, r21
 c7e:	98 f0       	brcs	.+38     	; 0xca6 <__fp_cmp+0x46>
 c80:	62 1b       	sub	r22, r18
 c82:	73 0b       	sbc	r23, r19
 c84:	84 0b       	sbc	r24, r20
 c86:	95 0b       	sbc	r25, r21
 c88:	39 f4       	brne	.+14     	; 0xc98 <__fp_cmp+0x38>
 c8a:	0a 26       	eor	r0, r26
 c8c:	61 f0       	breq	.+24     	; 0xca6 <__fp_cmp+0x46>
 c8e:	23 2b       	or	r18, r19
 c90:	24 2b       	or	r18, r20
 c92:	25 2b       	or	r18, r21
 c94:	21 f4       	brne	.+8      	; 0xc9e <__fp_cmp+0x3e>
 c96:	08 95       	ret
 c98:	0a 26       	eor	r0, r26
 c9a:	09 f4       	brne	.+2      	; 0xc9e <__fp_cmp+0x3e>
 c9c:	a1 40       	sbci	r26, 0x01	; 1
 c9e:	a6 95       	lsr	r26
 ca0:	8f ef       	ldi	r24, 0xFF	; 255
 ca2:	81 1d       	adc	r24, r1
 ca4:	81 1d       	adc	r24, r1
 ca6:	08 95       	ret

00000ca8 <__fp_inf>:
 ca8:	97 f9       	bld	r25, 7
 caa:	9f 67       	ori	r25, 0x7F	; 127
 cac:	80 e8       	ldi	r24, 0x80	; 128
 cae:	70 e0       	ldi	r23, 0x00	; 0
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	08 95       	ret

00000cb4 <__fp_nan>:
 cb4:	9f ef       	ldi	r25, 0xFF	; 255
 cb6:	80 ec       	ldi	r24, 0xC0	; 192
 cb8:	08 95       	ret

00000cba <__fp_pscA>:
 cba:	00 24       	eor	r0, r0
 cbc:	0a 94       	dec	r0
 cbe:	16 16       	cp	r1, r22
 cc0:	17 06       	cpc	r1, r23
 cc2:	18 06       	cpc	r1, r24
 cc4:	09 06       	cpc	r0, r25
 cc6:	08 95       	ret

00000cc8 <__fp_pscB>:
 cc8:	00 24       	eor	r0, r0
 cca:	0a 94       	dec	r0
 ccc:	12 16       	cp	r1, r18
 cce:	13 06       	cpc	r1, r19
 cd0:	14 06       	cpc	r1, r20
 cd2:	05 06       	cpc	r0, r21
 cd4:	08 95       	ret

00000cd6 <__fp_round>:
 cd6:	09 2e       	mov	r0, r25
 cd8:	03 94       	inc	r0
 cda:	00 0c       	add	r0, r0
 cdc:	11 f4       	brne	.+4      	; 0xce2 <__fp_round+0xc>
 cde:	88 23       	and	r24, r24
 ce0:	52 f0       	brmi	.+20     	; 0xcf6 <__fp_round+0x20>
 ce2:	bb 0f       	add	r27, r27
 ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fp_round+0x20>
 ce6:	bf 2b       	or	r27, r31
 ce8:	11 f4       	brne	.+4      	; 0xcee <__fp_round+0x18>
 cea:	60 ff       	sbrs	r22, 0
 cec:	04 c0       	rjmp	.+8      	; 0xcf6 <__fp_round+0x20>
 cee:	6f 5f       	subi	r22, 0xFF	; 255
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255
 cf2:	8f 4f       	sbci	r24, 0xFF	; 255
 cf4:	9f 4f       	sbci	r25, 0xFF	; 255
 cf6:	08 95       	ret

00000cf8 <__fp_split3>:
 cf8:	57 fd       	sbrc	r21, 7
 cfa:	90 58       	subi	r25, 0x80	; 128
 cfc:	44 0f       	add	r20, r20
 cfe:	55 1f       	adc	r21, r21
 d00:	59 f0       	breq	.+22     	; 0xd18 <__fp_splitA+0x10>
 d02:	5f 3f       	cpi	r21, 0xFF	; 255
 d04:	71 f0       	breq	.+28     	; 0xd22 <__fp_splitA+0x1a>
 d06:	47 95       	ror	r20

00000d08 <__fp_splitA>:
 d08:	88 0f       	add	r24, r24
 d0a:	97 fb       	bst	r25, 7
 d0c:	99 1f       	adc	r25, r25
 d0e:	61 f0       	breq	.+24     	; 0xd28 <__fp_splitA+0x20>
 d10:	9f 3f       	cpi	r25, 0xFF	; 255
 d12:	79 f0       	breq	.+30     	; 0xd32 <__fp_splitA+0x2a>
 d14:	87 95       	ror	r24
 d16:	08 95       	ret
 d18:	12 16       	cp	r1, r18
 d1a:	13 06       	cpc	r1, r19
 d1c:	14 06       	cpc	r1, r20
 d1e:	55 1f       	adc	r21, r21
 d20:	f2 cf       	rjmp	.-28     	; 0xd06 <__fp_split3+0xe>
 d22:	46 95       	lsr	r20
 d24:	f1 df       	rcall	.-30     	; 0xd08 <__fp_splitA>
 d26:	08 c0       	rjmp	.+16     	; 0xd38 <__fp_splitA+0x30>
 d28:	16 16       	cp	r1, r22
 d2a:	17 06       	cpc	r1, r23
 d2c:	18 06       	cpc	r1, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	f1 cf       	rjmp	.-30     	; 0xd14 <__fp_splitA+0xc>
 d32:	86 95       	lsr	r24
 d34:	71 05       	cpc	r23, r1
 d36:	61 05       	cpc	r22, r1
 d38:	08 94       	sec
 d3a:	08 95       	ret

00000d3c <__fp_zero>:
 d3c:	e8 94       	clt

00000d3e <__fp_szero>:
 d3e:	bb 27       	eor	r27, r27
 d40:	66 27       	eor	r22, r22
 d42:	77 27       	eor	r23, r23
 d44:	cb 01       	movw	r24, r22
 d46:	97 f9       	bld	r25, 7
 d48:	08 95       	ret

00000d4a <__gesf2>:
 d4a:	8a df       	rcall	.-236    	; 0xc60 <__fp_cmp>
 d4c:	08 f4       	brcc	.+2      	; 0xd50 <__gesf2+0x6>
 d4e:	8f ef       	ldi	r24, 0xFF	; 255
 d50:	08 95       	ret

00000d52 <__mulsf3>:
 d52:	0b d0       	rcall	.+22     	; 0xd6a <__mulsf3x>
 d54:	c0 cf       	rjmp	.-128    	; 0xcd6 <__fp_round>
 d56:	b1 df       	rcall	.-158    	; 0xcba <__fp_pscA>
 d58:	28 f0       	brcs	.+10     	; 0xd64 <__mulsf3+0x12>
 d5a:	b6 df       	rcall	.-148    	; 0xcc8 <__fp_pscB>
 d5c:	18 f0       	brcs	.+6      	; 0xd64 <__mulsf3+0x12>
 d5e:	95 23       	and	r25, r21
 d60:	09 f0       	breq	.+2      	; 0xd64 <__mulsf3+0x12>
 d62:	a2 cf       	rjmp	.-188    	; 0xca8 <__fp_inf>
 d64:	a7 cf       	rjmp	.-178    	; 0xcb4 <__fp_nan>
 d66:	11 24       	eor	r1, r1
 d68:	ea cf       	rjmp	.-44     	; 0xd3e <__fp_szero>

00000d6a <__mulsf3x>:
 d6a:	c6 df       	rcall	.-116    	; 0xcf8 <__fp_split3>
 d6c:	a0 f3       	brcs	.-24     	; 0xd56 <__mulsf3+0x4>

00000d6e <__mulsf3_pse>:
 d6e:	95 9f       	mul	r25, r21
 d70:	d1 f3       	breq	.-12     	; 0xd66 <__mulsf3+0x14>
 d72:	95 0f       	add	r25, r21
 d74:	50 e0       	ldi	r21, 0x00	; 0
 d76:	55 1f       	adc	r21, r21
 d78:	62 9f       	mul	r22, r18
 d7a:	f0 01       	movw	r30, r0
 d7c:	72 9f       	mul	r23, r18
 d7e:	bb 27       	eor	r27, r27
 d80:	f0 0d       	add	r31, r0
 d82:	b1 1d       	adc	r27, r1
 d84:	63 9f       	mul	r22, r19
 d86:	aa 27       	eor	r26, r26
 d88:	f0 0d       	add	r31, r0
 d8a:	b1 1d       	adc	r27, r1
 d8c:	aa 1f       	adc	r26, r26
 d8e:	64 9f       	mul	r22, r20
 d90:	66 27       	eor	r22, r22
 d92:	b0 0d       	add	r27, r0
 d94:	a1 1d       	adc	r26, r1
 d96:	66 1f       	adc	r22, r22
 d98:	82 9f       	mul	r24, r18
 d9a:	22 27       	eor	r18, r18
 d9c:	b0 0d       	add	r27, r0
 d9e:	a1 1d       	adc	r26, r1
 da0:	62 1f       	adc	r22, r18
 da2:	73 9f       	mul	r23, r19
 da4:	b0 0d       	add	r27, r0
 da6:	a1 1d       	adc	r26, r1
 da8:	62 1f       	adc	r22, r18
 daa:	83 9f       	mul	r24, r19
 dac:	a0 0d       	add	r26, r0
 dae:	61 1d       	adc	r22, r1
 db0:	22 1f       	adc	r18, r18
 db2:	74 9f       	mul	r23, r20
 db4:	33 27       	eor	r19, r19
 db6:	a0 0d       	add	r26, r0
 db8:	61 1d       	adc	r22, r1
 dba:	23 1f       	adc	r18, r19
 dbc:	84 9f       	mul	r24, r20
 dbe:	60 0d       	add	r22, r0
 dc0:	21 1d       	adc	r18, r1
 dc2:	82 2f       	mov	r24, r18
 dc4:	76 2f       	mov	r23, r22
 dc6:	6a 2f       	mov	r22, r26
 dc8:	11 24       	eor	r1, r1
 dca:	9f 57       	subi	r25, 0x7F	; 127
 dcc:	50 40       	sbci	r21, 0x00	; 0
 dce:	8a f0       	brmi	.+34     	; 0xdf2 <__mulsf3_pse+0x84>
 dd0:	e1 f0       	breq	.+56     	; 0xe0a <__mulsf3_pse+0x9c>
 dd2:	88 23       	and	r24, r24
 dd4:	4a f0       	brmi	.+18     	; 0xde8 <__mulsf3_pse+0x7a>
 dd6:	ee 0f       	add	r30, r30
 dd8:	ff 1f       	adc	r31, r31
 dda:	bb 1f       	adc	r27, r27
 ddc:	66 1f       	adc	r22, r22
 dde:	77 1f       	adc	r23, r23
 de0:	88 1f       	adc	r24, r24
 de2:	91 50       	subi	r25, 0x01	; 1
 de4:	50 40       	sbci	r21, 0x00	; 0
 de6:	a9 f7       	brne	.-22     	; 0xdd2 <__mulsf3_pse+0x64>
 de8:	9e 3f       	cpi	r25, 0xFE	; 254
 dea:	51 05       	cpc	r21, r1
 dec:	70 f0       	brcs	.+28     	; 0xe0a <__mulsf3_pse+0x9c>
 dee:	5c cf       	rjmp	.-328    	; 0xca8 <__fp_inf>
 df0:	a6 cf       	rjmp	.-180    	; 0xd3e <__fp_szero>
 df2:	5f 3f       	cpi	r21, 0xFF	; 255
 df4:	ec f3       	brlt	.-6      	; 0xdf0 <__mulsf3_pse+0x82>
 df6:	98 3e       	cpi	r25, 0xE8	; 232
 df8:	dc f3       	brlt	.-10     	; 0xdf0 <__mulsf3_pse+0x82>
 dfa:	86 95       	lsr	r24
 dfc:	77 95       	ror	r23
 dfe:	67 95       	ror	r22
 e00:	b7 95       	ror	r27
 e02:	f7 95       	ror	r31
 e04:	e7 95       	ror	r30
 e06:	9f 5f       	subi	r25, 0xFF	; 255
 e08:	c1 f7       	brne	.-16     	; 0xdfa <__mulsf3_pse+0x8c>
 e0a:	fe 2b       	or	r31, r30
 e0c:	88 0f       	add	r24, r24
 e0e:	91 1d       	adc	r25, r1
 e10:	96 95       	lsr	r25
 e12:	87 95       	ror	r24
 e14:	97 f9       	bld	r25, 7
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
