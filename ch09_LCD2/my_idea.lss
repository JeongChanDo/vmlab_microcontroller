
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000e60  00000ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e60  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000c9c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007bc  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 34       	cpi	r26, 0x44	; 68
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 95 03 	call	0x72a	; 0x72a <main>
  b6:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <LCD_cmd_write>:
#define DATA_READ		0xFF	//데이터 읽기 E=1, RW=1, RS=1
#define LCD_EN			0x04	//PG2에 연결

//LCD에 명령을 쓰기위한 함수
void LCD_cmd_write(unsigned char cmd)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	2f 97       	sbiw	r28, 0x0f	; 15
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	8f 87       	std	Y+15, r24	; 0x0f
	PORTG = CMD_WRITE;
  d4:	e5 e6       	ldi	r30, 0x65	; 101
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8c ef       	ldi	r24, 0xFC	; 252
  da:	80 83       	st	Z, r24
	PORTB = cmd;
  dc:	e8 e3       	ldi	r30, 0x38	; 56
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8f 85       	ldd	r24, Y+15	; 0x0f
  e2:	80 83       	st	Z, r24
	PORTG =PORTG^LCD_EN;
  e4:	a5 e6       	ldi	r26, 0x65	; 101
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e5 e6       	ldi	r30, 0x65	; 101
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	89 27       	eor	r24, r25
  f2:	8c 93       	st	X, r24
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e4       	ldi	r27, 0x40	; 64
  fc:	8b 87       	std	Y+11, r24	; 0x0b
  fe:	9c 87       	std	Y+12, r25	; 0x0c
 100:	ad 87       	std	Y+13, r26	; 0x0d
 102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 104:	6b 85       	ldd	r22, Y+11	; 0x0b
 106:	7c 85       	ldd	r23, Y+12	; 0x0c
 108:	8d 85       	ldd	r24, Y+13	; 0x0d
 10a:	9e 85       	ldd	r25, Y+14	; 0x0e
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4a e7       	ldi	r20, 0x7A	; 122
 112:	53 e4       	ldi	r21, 0x43	; 67
 114:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 118:	dc 01       	movw	r26, r24
 11a:	cb 01       	movw	r24, r22
 11c:	8f 83       	std	Y+7, r24	; 0x07
 11e:	98 87       	std	Y+8, r25	; 0x08
 120:	a9 87       	std	Y+9, r26	; 0x09
 122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 124:	6f 81       	ldd	r22, Y+7	; 0x07
 126:	78 85       	ldd	r23, Y+8	; 0x08
 128:	89 85       	ldd	r24, Y+9	; 0x09
 12a:	9a 85       	ldd	r25, Y+10	; 0x0a
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e8       	ldi	r20, 0x80	; 128
 132:	5f e3       	ldi	r21, 0x3F	; 63
 134:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 138:	88 23       	and	r24, r24
 13a:	2c f4       	brge	.+10     	; 0x146 <LCD_cmd_write+0x88>
		__ticks = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9e 83       	std	Y+6, r25	; 0x06
 142:	8d 83       	std	Y+5, r24	; 0x05
 144:	3f c0       	rjmp	.+126    	; 0x1c4 <LCD_cmd_write+0x106>
	else if (__tmp > 65535)
 146:	6f 81       	ldd	r22, Y+7	; 0x07
 148:	78 85       	ldd	r23, Y+8	; 0x08
 14a:	89 85       	ldd	r24, Y+9	; 0x09
 14c:	9a 85       	ldd	r25, Y+10	; 0x0a
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	3f ef       	ldi	r19, 0xFF	; 255
 152:	4f e7       	ldi	r20, 0x7F	; 127
 154:	57 e4       	ldi	r21, 0x47	; 71
 156:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 15a:	18 16       	cp	r1, r24
 15c:	4c f5       	brge	.+82     	; 0x1b0 <LCD_cmd_write+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 15e:	6b 85       	ldd	r22, Y+11	; 0x0b
 160:	7c 85       	ldd	r23, Y+12	; 0x0c
 162:	8d 85       	ldd	r24, Y+13	; 0x0d
 164:	9e 85       	ldd	r25, Y+14	; 0x0e
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 e2       	ldi	r20, 0x20	; 32
 16c:	51 e4       	ldi	r21, 0x41	; 65
 16e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	9e 83       	std	Y+6, r25	; 0x06
 184:	8d 83       	std	Y+5, r24	; 0x05
 186:	0f c0       	rjmp	.+30     	; 0x1a6 <LCD_cmd_write+0xe8>
 188:	89 e1       	ldi	r24, 0x19	; 25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9c 83       	std	Y+4, r25	; 0x04
 18e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	9c 81       	ldd	r25, Y+4	; 0x04
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_cmd_write+0xd6>
 198:	9c 83       	std	Y+4, r25	; 0x04
 19a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	9e 83       	std	Y+6, r25	; 0x06
 1a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	8d 81       	ldd	r24, Y+5	; 0x05
 1a8:	9e 81       	ldd	r25, Y+6	; 0x06
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	69 f7       	brne	.-38     	; 0x188 <LCD_cmd_write+0xca>
 1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <LCD_cmd_write+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b0:	6f 81       	ldd	r22, Y+7	; 0x07
 1b2:	78 85       	ldd	r23, Y+8	; 0x08
 1b4:	89 85       	ldd	r24, Y+9	; 0x09
 1b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b8:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 1bc:	dc 01       	movw	r26, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	9e 83       	std	Y+6, r25	; 0x06
 1c2:	8d 83       	std	Y+5, r24	; 0x05
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_cmd_write+0x112>
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
 1d8:	2f 96       	adiw	r28, 0x0f	; 15
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <LCD_data_write>:
//LCD에 데이터를 쓰기 위한 함수
void LCD_data_write(unsigned char data)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	2f 97       	sbiw	r28, 0x0f	; 15
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	8f 87       	std	Y+15, r24	; 0x0f
	PORTG = DATA_WRITE;
 200:	e5 e6       	ldi	r30, 0x65	; 101
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	8d ef       	ldi	r24, 0xFD	; 253
 206:	80 83       	st	Z, r24
	PORTB = data;
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	8f 85       	ldd	r24, Y+15	; 0x0f
 20e:	80 83       	st	Z, r24
	PORTG = PORTG^LCD_EN;
 210:	a5 e6       	ldi	r26, 0x65	; 101
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	e5 e6       	ldi	r30, 0x65	; 101
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	90 81       	ld	r25, Z
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	89 27       	eor	r24, r25
 21e:	8c 93       	st	X, r24
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e4       	ldi	r27, 0x40	; 64
 228:	8b 87       	std	Y+11, r24	; 0x0b
 22a:	9c 87       	std	Y+12, r25	; 0x0c
 22c:	ad 87       	std	Y+13, r26	; 0x0d
 22e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 230:	6b 85       	ldd	r22, Y+11	; 0x0b
 232:	7c 85       	ldd	r23, Y+12	; 0x0c
 234:	8d 85       	ldd	r24, Y+13	; 0x0d
 236:	9e 85       	ldd	r25, Y+14	; 0x0e
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	4a e7       	ldi	r20, 0x7A	; 122
 23e:	53 e4       	ldi	r21, 0x43	; 67
 240:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 244:	dc 01       	movw	r26, r24
 246:	cb 01       	movw	r24, r22
 248:	8f 83       	std	Y+7, r24	; 0x07
 24a:	98 87       	std	Y+8, r25	; 0x08
 24c:	a9 87       	std	Y+9, r26	; 0x09
 24e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 250:	6f 81       	ldd	r22, Y+7	; 0x07
 252:	78 85       	ldd	r23, Y+8	; 0x08
 254:	89 85       	ldd	r24, Y+9	; 0x09
 256:	9a 85       	ldd	r25, Y+10	; 0x0a
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e8       	ldi	r20, 0x80	; 128
 25e:	5f e3       	ldi	r21, 0x3F	; 63
 260:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 264:	88 23       	and	r24, r24
 266:	2c f4       	brge	.+10     	; 0x272 <LCD_data_write+0x88>
		__ticks = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9e 83       	std	Y+6, r25	; 0x06
 26e:	8d 83       	std	Y+5, r24	; 0x05
 270:	3f c0       	rjmp	.+126    	; 0x2f0 <LCD_data_write+0x106>
	else if (__tmp > 65535)
 272:	6f 81       	ldd	r22, Y+7	; 0x07
 274:	78 85       	ldd	r23, Y+8	; 0x08
 276:	89 85       	ldd	r24, Y+9	; 0x09
 278:	9a 85       	ldd	r25, Y+10	; 0x0a
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	3f ef       	ldi	r19, 0xFF	; 255
 27e:	4f e7       	ldi	r20, 0x7F	; 127
 280:	57 e4       	ldi	r21, 0x47	; 71
 282:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 286:	18 16       	cp	r1, r24
 288:	4c f5       	brge	.+82     	; 0x2dc <LCD_data_write+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28a:	6b 85       	ldd	r22, Y+11	; 0x0b
 28c:	7c 85       	ldd	r23, Y+12	; 0x0c
 28e:	8d 85       	ldd	r24, Y+13	; 0x0d
 290:	9e 85       	ldd	r25, Y+14	; 0x0e
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e2       	ldi	r20, 0x20	; 32
 298:	51 e4       	ldi	r21, 0x41	; 65
 29a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	bc 01       	movw	r22, r24
 2a4:	cd 01       	movw	r24, r26
 2a6:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 2aa:	dc 01       	movw	r26, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	9e 83       	std	Y+6, r25	; 0x06
 2b0:	8d 83       	std	Y+5, r24	; 0x05
 2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <LCD_data_write+0xe8>
 2b4:	89 e1       	ldi	r24, 0x19	; 25
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9c 83       	std	Y+4, r25	; 0x04
 2ba:	8b 83       	std	Y+3, r24	; 0x03
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_data_write+0xd6>
 2c4:	9c 83       	std	Y+4, r25	; 0x04
 2c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ca:	9e 81       	ldd	r25, Y+6	; 0x06
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	9e 83       	std	Y+6, r25	; 0x06
 2d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	69 f7       	brne	.-38     	; 0x2b4 <LCD_data_write+0xca>
 2da:	14 c0       	rjmp	.+40     	; 0x304 <LCD_data_write+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2dc:	6f 81       	ldd	r22, Y+7	; 0x07
 2de:	78 85       	ldd	r23, Y+8	; 0x08
 2e0:	89 85       	ldd	r24, Y+9	; 0x09
 2e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2e4:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 2e8:	dc 01       	movw	r26, r24
 2ea:	cb 01       	movw	r24, r22
 2ec:	9e 83       	std	Y+6, r25	; 0x06
 2ee:	8d 83       	std	Y+5, r24	; 0x05
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	9e 81       	ldd	r25, Y+6	; 0x06
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_data_write+0x112>
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
 304:	2f 96       	adiw	r28, 0x0f	; 15
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <init_LCD>:

void init_LCD(void)
{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	e4 97       	sbiw	r28, 0x34	; 52
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a0 e7       	ldi	r26, 0x70	; 112
 330:	b1 e4       	ldi	r27, 0x41	; 65
 332:	89 ab       	std	Y+49, r24	; 0x31
 334:	9a ab       	std	Y+50, r25	; 0x32
 336:	ab ab       	std	Y+51, r26	; 0x33
 338:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 33a:	69 a9       	ldd	r22, Y+49	; 0x31
 33c:	7a a9       	ldd	r23, Y+50	; 0x32
 33e:	8b a9       	ldd	r24, Y+51	; 0x33
 340:	9c a9       	ldd	r25, Y+52	; 0x34
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	4a e7       	ldi	r20, 0x7A	; 122
 348:	53 e4       	ldi	r21, 0x43	; 67
 34a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	8d a7       	std	Y+45, r24	; 0x2d
 354:	9e a7       	std	Y+46, r25	; 0x2e
 356:	af a7       	std	Y+47, r26	; 0x2f
 358:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
 35a:	6d a5       	ldd	r22, Y+45	; 0x2d
 35c:	7e a5       	ldd	r23, Y+46	; 0x2e
 35e:	8f a5       	ldd	r24, Y+47	; 0x2f
 360:	98 a9       	ldd	r25, Y+48	; 0x30
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e8       	ldi	r20, 0x80	; 128
 368:	5f e3       	ldi	r21, 0x3F	; 63
 36a:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 36e:	88 23       	and	r24, r24
 370:	2c f4       	brge	.+10     	; 0x37c <init_LCD+0x66>
		__ticks = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	9c a7       	std	Y+44, r25	; 0x2c
 378:	8b a7       	std	Y+43, r24	; 0x2b
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <init_LCD+0xe4>
	else if (__tmp > 65535)
 37c:	6d a5       	ldd	r22, Y+45	; 0x2d
 37e:	7e a5       	ldd	r23, Y+46	; 0x2e
 380:	8f a5       	ldd	r24, Y+47	; 0x2f
 382:	98 a9       	ldd	r25, Y+48	; 0x30
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	3f ef       	ldi	r19, 0xFF	; 255
 388:	4f e7       	ldi	r20, 0x7F	; 127
 38a:	57 e4       	ldi	r21, 0x47	; 71
 38c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 390:	18 16       	cp	r1, r24
 392:	4c f5       	brge	.+82     	; 0x3e6 <init_LCD+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 394:	69 a9       	ldd	r22, Y+49	; 0x31
 396:	7a a9       	ldd	r23, Y+50	; 0x32
 398:	8b a9       	ldd	r24, Y+51	; 0x33
 39a:	9c a9       	ldd	r25, Y+52	; 0x34
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e2       	ldi	r20, 0x20	; 32
 3a2:	51 e4       	ldi	r21, 0x41	; 65
 3a4:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	bc 01       	movw	r22, r24
 3ae:	cd 01       	movw	r24, r26
 3b0:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	9c a7       	std	Y+44, r25	; 0x2c
 3ba:	8b a7       	std	Y+43, r24	; 0x2b
 3bc:	0f c0       	rjmp	.+30     	; 0x3dc <init_LCD+0xc6>
 3be:	89 e1       	ldi	r24, 0x19	; 25
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9a a7       	std	Y+42, r25	; 0x2a
 3c4:	89 a7       	std	Y+41, r24	; 0x29
 3c6:	89 a5       	ldd	r24, Y+41	; 0x29
 3c8:	9a a5       	ldd	r25, Y+42	; 0x2a
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <init_LCD+0xb4>
 3ce:	9a a7       	std	Y+42, r25	; 0x2a
 3d0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	8b a5       	ldd	r24, Y+43	; 0x2b
 3d4:	9c a5       	ldd	r25, Y+44	; 0x2c
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	9c a7       	std	Y+44, r25	; 0x2c
 3da:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3dc:	8b a5       	ldd	r24, Y+43	; 0x2b
 3de:	9c a5       	ldd	r25, Y+44	; 0x2c
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	69 f7       	brne	.-38     	; 0x3be <init_LCD+0xa8>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <init_LCD+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3e6:	6d a5       	ldd	r22, Y+45	; 0x2d
 3e8:	7e a5       	ldd	r23, Y+46	; 0x2e
 3ea:	8f a5       	ldd	r24, Y+47	; 0x2f
 3ec:	98 a9       	ldd	r25, Y+48	; 0x30
 3ee:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	9c a7       	std	Y+44, r25	; 0x2c
 3f8:	8b a7       	std	Y+43, r24	; 0x2b
 3fa:	8b a5       	ldd	r24, Y+43	; 0x2b
 3fc:	9c a5       	ldd	r25, Y+44	; 0x2c
 3fe:	98 a7       	std	Y+40, r25	; 0x28
 400:	8f a3       	std	Y+39, r24	; 0x27
 402:	8f a1       	ldd	r24, Y+39	; 0x27
 404:	98 a5       	ldd	r25, Y+40	; 0x28
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <init_LCD+0xf0>
 40a:	98 a7       	std	Y+40, r25	; 0x28
 40c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(15);
	LCD_cmd_write(0x38);//명령레지스터에 0x38 전달
 40e:	88 e3       	ldi	r24, 0x38	; 56
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	a0 ea       	ldi	r26, 0xA0	; 160
 41a:	b0 e4       	ldi	r27, 0x40	; 64
 41c:	8b a3       	std	Y+35, r24	; 0x23
 41e:	9c a3       	std	Y+36, r25	; 0x24
 420:	ad a3       	std	Y+37, r26	; 0x25
 422:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 424:	6b a1       	ldd	r22, Y+35	; 0x23
 426:	7c a1       	ldd	r23, Y+36	; 0x24
 428:	8d a1       	ldd	r24, Y+37	; 0x25
 42a:	9e a1       	ldd	r25, Y+38	; 0x26
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	4a e7       	ldi	r20, 0x7A	; 122
 432:	53 e4       	ldi	r21, 0x43	; 67
 434:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 438:	dc 01       	movw	r26, r24
 43a:	cb 01       	movw	r24, r22
 43c:	8f 8f       	std	Y+31, r24	; 0x1f
 43e:	98 a3       	std	Y+32, r25	; 0x20
 440:	a9 a3       	std	Y+33, r26	; 0x21
 442:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
 444:	6f 8d       	ldd	r22, Y+31	; 0x1f
 446:	78 a1       	ldd	r23, Y+32	; 0x20
 448:	89 a1       	ldd	r24, Y+33	; 0x21
 44a:	9a a1       	ldd	r25, Y+34	; 0x22
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 e8       	ldi	r20, 0x80	; 128
 452:	5f e3       	ldi	r21, 0x3F	; 63
 454:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 458:	88 23       	and	r24, r24
 45a:	2c f4       	brge	.+10     	; 0x466 <init_LCD+0x150>
		__ticks = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	9e 8f       	std	Y+30, r25	; 0x1e
 462:	8d 8f       	std	Y+29, r24	; 0x1d
 464:	3f c0       	rjmp	.+126    	; 0x4e4 <init_LCD+0x1ce>
	else if (__tmp > 65535)
 466:	6f 8d       	ldd	r22, Y+31	; 0x1f
 468:	78 a1       	ldd	r23, Y+32	; 0x20
 46a:	89 a1       	ldd	r24, Y+33	; 0x21
 46c:	9a a1       	ldd	r25, Y+34	; 0x22
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	3f ef       	ldi	r19, 0xFF	; 255
 472:	4f e7       	ldi	r20, 0x7F	; 127
 474:	57 e4       	ldi	r21, 0x47	; 71
 476:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 47a:	18 16       	cp	r1, r24
 47c:	4c f5       	brge	.+82     	; 0x4d0 <init_LCD+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 47e:	6b a1       	ldd	r22, Y+35	; 0x23
 480:	7c a1       	ldd	r23, Y+36	; 0x24
 482:	8d a1       	ldd	r24, Y+37	; 0x25
 484:	9e a1       	ldd	r25, Y+38	; 0x26
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e2       	ldi	r20, 0x20	; 32
 48c:	51 e4       	ldi	r21, 0x41	; 65
 48e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 49e:	dc 01       	movw	r26, r24
 4a0:	cb 01       	movw	r24, r22
 4a2:	9e 8f       	std	Y+30, r25	; 0x1e
 4a4:	8d 8f       	std	Y+29, r24	; 0x1d
 4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <init_LCD+0x1b0>
 4a8:	89 e1       	ldi	r24, 0x19	; 25
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9c 8f       	std	Y+28, r25	; 0x1c
 4ae:	8b 8f       	std	Y+27, r24	; 0x1b
 4b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <init_LCD+0x19e>
 4b8:	9c 8f       	std	Y+28, r25	; 0x1c
 4ba:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4be:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	9e 8f       	std	Y+30, r25	; 0x1e
 4c4:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	69 f7       	brne	.-38     	; 0x4a8 <init_LCD+0x192>
 4ce:	14 c0       	rjmp	.+40     	; 0x4f8 <init_LCD+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
 4d2:	78 a1       	ldd	r23, Y+32	; 0x20
 4d4:	89 a1       	ldd	r24, Y+33	; 0x21
 4d6:	9a a1       	ldd	r25, Y+34	; 0x22
 4d8:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 4dc:	dc 01       	movw	r26, r24
 4de:	cb 01       	movw	r24, r22
 4e0:	9e 8f       	std	Y+30, r25	; 0x1e
 4e2:	8d 8f       	std	Y+29, r24	; 0x1d
 4e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4e8:	9a 8f       	std	Y+26, r25	; 0x1a
 4ea:	89 8f       	std	Y+25, r24	; 0x19
 4ec:	89 8d       	ldd	r24, Y+25	; 0x19
 4ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <init_LCD+0x1da>
 4f4:	9a 8f       	std	Y+26, r25	; 0x1a
 4f6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	LCD_cmd_write(0x38);
 4f8:	88 e3       	ldi	r24, 0x38	; 56
 4fa:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	a8 ec       	ldi	r26, 0xC8	; 200
 504:	b2 e4       	ldi	r27, 0x42	; 66
 506:	8d 8b       	std	Y+21, r24	; 0x15
 508:	9e 8b       	std	Y+22, r25	; 0x16
 50a:	af 8b       	std	Y+23, r26	; 0x17
 50c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 50e:	6d 89       	ldd	r22, Y+21	; 0x15
 510:	7e 89       	ldd	r23, Y+22	; 0x16
 512:	8f 89       	ldd	r24, Y+23	; 0x17
 514:	98 8d       	ldd	r25, Y+24	; 0x18
 516:	2b ea       	ldi	r18, 0xAB	; 171
 518:	3a ea       	ldi	r19, 0xAA	; 170
 51a:	4a ea       	ldi	r20, 0xAA	; 170
 51c:	5e e3       	ldi	r21, 0x3E	; 62
 51e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 522:	dc 01       	movw	r26, r24
 524:	cb 01       	movw	r24, r22
 526:	89 8b       	std	Y+17, r24	; 0x11
 528:	9a 8b       	std	Y+18, r25	; 0x12
 52a:	ab 8b       	std	Y+19, r26	; 0x13
 52c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 52e:	69 89       	ldd	r22, Y+17	; 0x11
 530:	7a 89       	ldd	r23, Y+18	; 0x12
 532:	8b 89       	ldd	r24, Y+19	; 0x13
 534:	9c 89       	ldd	r25, Y+20	; 0x14
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e8       	ldi	r20, 0x80	; 128
 53c:	5f e3       	ldi	r21, 0x3F	; 63
 53e:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 542:	88 23       	and	r24, r24
 544:	1c f4       	brge	.+6      	; 0x54c <init_LCD+0x236>
		__ticks = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	88 8b       	std	Y+16, r24	; 0x10
 54a:	91 c0       	rjmp	.+290    	; 0x66e <init_LCD+0x358>
	else if (__tmp > 255)
 54c:	69 89       	ldd	r22, Y+17	; 0x11
 54e:	7a 89       	ldd	r23, Y+18	; 0x12
 550:	8b 89       	ldd	r24, Y+19	; 0x13
 552:	9c 89       	ldd	r25, Y+20	; 0x14
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4f e7       	ldi	r20, 0x7F	; 127
 55a:	53 e4       	ldi	r21, 0x43	; 67
 55c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 560:	18 16       	cp	r1, r24
 562:	0c f0       	brlt	.+2      	; 0x566 <init_LCD+0x250>
 564:	7b c0       	rjmp	.+246    	; 0x65c <init_LCD+0x346>
	{
		_delay_ms(__us / 1000.0);
 566:	6d 89       	ldd	r22, Y+21	; 0x15
 568:	7e 89       	ldd	r23, Y+22	; 0x16
 56a:	8f 89       	ldd	r24, Y+23	; 0x17
 56c:	98 8d       	ldd	r25, Y+24	; 0x18
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	4a e7       	ldi	r20, 0x7A	; 122
 574:	54 e4       	ldi	r21, 0x44	; 68
 576:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divsf3>
 57a:	dc 01       	movw	r26, r24
 57c:	cb 01       	movw	r24, r22
 57e:	8c 87       	std	Y+12, r24	; 0x0c
 580:	9d 87       	std	Y+13, r25	; 0x0d
 582:	ae 87       	std	Y+14, r26	; 0x0e
 584:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 586:	6c 85       	ldd	r22, Y+12	; 0x0c
 588:	7d 85       	ldd	r23, Y+13	; 0x0d
 58a:	8e 85       	ldd	r24, Y+14	; 0x0e
 58c:	9f 85       	ldd	r25, Y+15	; 0x0f
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	4a e7       	ldi	r20, 0x7A	; 122
 594:	53 e4       	ldi	r21, 0x43	; 67
 596:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 59a:	dc 01       	movw	r26, r24
 59c:	cb 01       	movw	r24, r22
 59e:	88 87       	std	Y+8, r24	; 0x08
 5a0:	99 87       	std	Y+9, r25	; 0x09
 5a2:	aa 87       	std	Y+10, r26	; 0x0a
 5a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 5a6:	68 85       	ldd	r22, Y+8	; 0x08
 5a8:	79 85       	ldd	r23, Y+9	; 0x09
 5aa:	8a 85       	ldd	r24, Y+10	; 0x0a
 5ac:	9b 85       	ldd	r25, Y+11	; 0x0b
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	40 e8       	ldi	r20, 0x80	; 128
 5b4:	5f e3       	ldi	r21, 0x3F	; 63
 5b6:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 5ba:	88 23       	and	r24, r24
 5bc:	2c f4       	brge	.+10     	; 0x5c8 <init_LCD+0x2b2>
		__ticks = 1;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	9f 83       	std	Y+7, r25	; 0x07
 5c4:	8e 83       	std	Y+6, r24	; 0x06
 5c6:	3f c0       	rjmp	.+126    	; 0x646 <init_LCD+0x330>
	else if (__tmp > 65535)
 5c8:	68 85       	ldd	r22, Y+8	; 0x08
 5ca:	79 85       	ldd	r23, Y+9	; 0x09
 5cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 5ce:	9b 85       	ldd	r25, Y+11	; 0x0b
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	3f ef       	ldi	r19, 0xFF	; 255
 5d4:	4f e7       	ldi	r20, 0x7F	; 127
 5d6:	57 e4       	ldi	r21, 0x47	; 71
 5d8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 5dc:	18 16       	cp	r1, r24
 5de:	4c f5       	brge	.+82     	; 0x632 <init_LCD+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5e0:	6c 85       	ldd	r22, Y+12	; 0x0c
 5e2:	7d 85       	ldd	r23, Y+13	; 0x0d
 5e4:	8e 85       	ldd	r24, Y+14	; 0x0e
 5e6:	9f 85       	ldd	r25, Y+15	; 0x0f
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	40 e2       	ldi	r20, 0x20	; 32
 5ee:	51 e4       	ldi	r21, 0x41	; 65
 5f0:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 5f4:	dc 01       	movw	r26, r24
 5f6:	cb 01       	movw	r24, r22
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 600:	dc 01       	movw	r26, r24
 602:	cb 01       	movw	r24, r22
 604:	9f 83       	std	Y+7, r25	; 0x07
 606:	8e 83       	std	Y+6, r24	; 0x06
 608:	0f c0       	rjmp	.+30     	; 0x628 <init_LCD+0x312>
 60a:	89 e1       	ldi	r24, 0x19	; 25
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	9d 83       	std	Y+5, r25	; 0x05
 610:	8c 83       	std	Y+4, r24	; 0x04
 612:	8c 81       	ldd	r24, Y+4	; 0x04
 614:	9d 81       	ldd	r25, Y+5	; 0x05
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <init_LCD+0x300>
 61a:	9d 83       	std	Y+5, r25	; 0x05
 61c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 61e:	8e 81       	ldd	r24, Y+6	; 0x06
 620:	9f 81       	ldd	r25, Y+7	; 0x07
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	9f 83       	std	Y+7, r25	; 0x07
 626:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 628:	8e 81       	ldd	r24, Y+6	; 0x06
 62a:	9f 81       	ldd	r25, Y+7	; 0x07
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	69 f7       	brne	.-38     	; 0x60a <init_LCD+0x2f4>
 630:	24 c0       	rjmp	.+72     	; 0x67a <init_LCD+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 632:	68 85       	ldd	r22, Y+8	; 0x08
 634:	79 85       	ldd	r23, Y+9	; 0x09
 636:	8a 85       	ldd	r24, Y+10	; 0x0a
 638:	9b 85       	ldd	r25, Y+11	; 0x0b
 63a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 63e:	dc 01       	movw	r26, r24
 640:	cb 01       	movw	r24, r22
 642:	9f 83       	std	Y+7, r25	; 0x07
 644:	8e 83       	std	Y+6, r24	; 0x06
 646:	8e 81       	ldd	r24, Y+6	; 0x06
 648:	9f 81       	ldd	r25, Y+7	; 0x07
 64a:	9b 83       	std	Y+3, r25	; 0x03
 64c:	8a 83       	std	Y+2, r24	; 0x02
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	9b 81       	ldd	r25, Y+3	; 0x03
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <init_LCD+0x33c>
 656:	9b 83       	std	Y+3, r25	; 0x03
 658:	8a 83       	std	Y+2, r24	; 0x02
 65a:	0f c0       	rjmp	.+30     	; 0x67a <init_LCD+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 65c:	69 89       	ldd	r22, Y+17	; 0x11
 65e:	7a 89       	ldd	r23, Y+18	; 0x12
 660:	8b 89       	ldd	r24, Y+19	; 0x13
 662:	9c 89       	ldd	r25, Y+20	; 0x14
 664:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 668:	dc 01       	movw	r26, r24
 66a:	cb 01       	movw	r24, r22
 66c:	88 8b       	std	Y+16, r24	; 0x10
 66e:	88 89       	ldd	r24, Y+16	; 0x10
 670:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	8a 95       	dec	r24
 676:	f1 f7       	brne	.-4      	; 0x674 <init_LCD+0x35e>
 678:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_cmd_write(0x38);
 67a:	88 e3       	ldi	r24, 0x38	; 56
 67c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
	LCD_cmd_write(0x08);
 680:	88 e0       	ldi	r24, 0x08	; 8
 682:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
	LCD_cmd_write(0x01);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
	LCD_cmd_write(0x06);
 68c:	86 e0       	ldi	r24, 0x06	; 6
 68e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
	LCD_cmd_write(0x0C);
 692:	8c e0       	ldi	r24, 0x0C	; 12
 694:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
}
 698:	e4 96       	adiw	r28, 0x34	; 52
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	cf 91       	pop	r28
 6a6:	df 91       	pop	r29
 6a8:	08 95       	ret

000006aa <LCD_wr_string>:

//LCD에 문자열 표시하기위한 함수
void LCD_wr_string(char d_line, char *str)
{
 6aa:	df 93       	push	r29
 6ac:	cf 93       	push	r28
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <LCD_wr_string+0x6>
 6b0:	0f 92       	push	r0
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	7b 83       	std	Y+3, r23	; 0x03
 6ba:	6a 83       	std	Y+2, r22	; 0x02
	LCD_cmd_write(d_line);
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd_write>
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <LCD_wr_string+0x2e>
	while(*str != '\0')
	{
		LCD_data_write(*str);
 6c4:	ea 81       	ldd	r30, Y+2	; 0x02
 6c6:	fb 81       	ldd	r31, Y+3	; 0x03
 6c8:	80 81       	ld	r24, Z
 6ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_data_write>
		str++;
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	9b 81       	ldd	r25, Y+3	; 0x03
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	9b 83       	std	Y+3, r25	; 0x03
 6d6:	8a 83       	std	Y+2, r24	; 0x02

//LCD에 문자열 표시하기위한 함수
void LCD_wr_string(char d_line, char *str)
{
	LCD_cmd_write(d_line);
	while(*str != '\0')
 6d8:	ea 81       	ldd	r30, Y+2	; 0x02
 6da:	fb 81       	ldd	r31, Y+3	; 0x03
 6dc:	80 81       	ld	r24, Z
 6de:	88 23       	and	r24, r24
 6e0:	89 f7       	brne	.-30     	; 0x6c4 <LCD_wr_string+0x1a>
	{
		LCD_data_write(*str);
		str++;
	}
}
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <init_system>:
//ATmega128 포트 초기화
void init_system(void)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
	//B,G- LCD
	DDRB=0xFF;
 6f6:	e7 e3       	ldi	r30, 0x37	; 55
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	80 83       	st	Z, r24
	DDRG=0xFF;
 6fe:	e4 e6       	ldi	r30, 0x64	; 100
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	80 83       	st	Z, r24
	//C- LED, D-SWITCH
	DDRC=0xFF;
 706:	e4 e3       	ldi	r30, 0x34	; 52
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	80 83       	st	Z, r24
	DDRD=0x00;
 70e:	e1 e3       	ldi	r30, 0x31	; 49
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	10 82       	st	Z, r1
	PORTC=0xFF;
 714:	e5 e3       	ldi	r30, 0x35	; 53
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	80 83       	st	Z, r24
	PORTD=0xFF;//내부풀업 사용
 71c:	e2 e3       	ldi	r30, 0x32	; 50
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	80 83       	st	Z, r24
}
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <main>:

int main()
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	ea 97       	sbiw	r28, 0x3a	; 58
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	de bf       	out	0x3e, r29	; 62
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	cd bf       	out	0x3d, r28	; 61
	init_system();
 73e:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_system>
	init_LCD();
 742:	0e 94 8b 01 	call	0x316	; 0x316 <init_LCD>


	unsigned char sw1, sw2;
	while(1)
	{
		sw1 = PIND & 0xFE;//1111 1110 -PD 0번 스위치 눌릴때
 746:	e0 e3       	ldi	r30, 0x30	; 48
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	8a af       	std	Y+58, r24	; 0x3a
		sw2 = PIND & 0xFD;//1111 1101 -PD 1번 스위치가 눌릴때
 750:	e0 e3       	ldi	r30, 0x30	; 48
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	8d 7f       	andi	r24, 0xFD	; 253
 758:	89 af       	std	Y+57, r24	; 0x39
		
		if (sw1 == PIND)
 75a:	e0 e3       	ldi	r30, 0x30	; 48
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	90 81       	ld	r25, Z
 760:	8a ad       	ldd	r24, Y+58	; 0x3a
 762:	98 17       	cp	r25, r24
 764:	09 f0       	breq	.+2      	; 0x768 <main+0x3e>
 766:	f9 c0       	rjmp	.+498    	; 0x95a <main+0x230>
		{
			LCD_wr_string(LINE1, "   switch 1 ");
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	31 e0       	ldi	r19, 0x01	; 1
 76c:	80 e8       	ldi	r24, 0x80	; 128
 76e:	b9 01       	movw	r22, r18
 770:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
			LCD_wr_string(LINE2, "200ms Blinking");
 774:	2d e0       	ldi	r18, 0x0D	; 13
 776:	31 e0       	ldi	r19, 0x01	; 1
 778:	80 ec       	ldi	r24, 0xC0	; 192
 77a:	b9 01       	movw	r22, r18
 77c:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
			PORTC = 0xFE;//1111 1110 0번 LED 블링크
 780:	e5 e3       	ldi	r30, 0x35	; 53
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	8e ef       	ldi	r24, 0xFE	; 254
 786:	80 83       	st	Z, r24
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	a8 e4       	ldi	r26, 0x48	; 72
 78e:	b3 e4       	ldi	r27, 0x43	; 67
 790:	8d ab       	std	Y+53, r24	; 0x35
 792:	9e ab       	std	Y+54, r25	; 0x36
 794:	af ab       	std	Y+55, r26	; 0x37
 796:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 798:	6d a9       	ldd	r22, Y+53	; 0x35
 79a:	7e a9       	ldd	r23, Y+54	; 0x36
 79c:	8f a9       	ldd	r24, Y+55	; 0x37
 79e:	98 ad       	ldd	r25, Y+56	; 0x38
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	4a e7       	ldi	r20, 0x7A	; 122
 7a6:	53 e4       	ldi	r21, 0x43	; 67
 7a8:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 7ac:	dc 01       	movw	r26, r24
 7ae:	cb 01       	movw	r24, r22
 7b0:	89 ab       	std	Y+49, r24	; 0x31
 7b2:	9a ab       	std	Y+50, r25	; 0x32
 7b4:	ab ab       	std	Y+51, r26	; 0x33
 7b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
 7b8:	69 a9       	ldd	r22, Y+49	; 0x31
 7ba:	7a a9       	ldd	r23, Y+50	; 0x32
 7bc:	8b a9       	ldd	r24, Y+51	; 0x33
 7be:	9c a9       	ldd	r25, Y+52	; 0x34
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	40 e8       	ldi	r20, 0x80	; 128
 7c6:	5f e3       	ldi	r21, 0x3F	; 63
 7c8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 7cc:	88 23       	and	r24, r24
 7ce:	2c f4       	brge	.+10     	; 0x7da <main+0xb0>
		__ticks = 1;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	98 ab       	std	Y+48, r25	; 0x30
 7d6:	8f a7       	std	Y+47, r24	; 0x2f
 7d8:	3f c0       	rjmp	.+126    	; 0x858 <main+0x12e>
	else if (__tmp > 65535)
 7da:	69 a9       	ldd	r22, Y+49	; 0x31
 7dc:	7a a9       	ldd	r23, Y+50	; 0x32
 7de:	8b a9       	ldd	r24, Y+51	; 0x33
 7e0:	9c a9       	ldd	r25, Y+52	; 0x34
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	3f ef       	ldi	r19, 0xFF	; 255
 7e6:	4f e7       	ldi	r20, 0x7F	; 127
 7e8:	57 e4       	ldi	r21, 0x47	; 71
 7ea:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 7ee:	18 16       	cp	r1, r24
 7f0:	4c f5       	brge	.+82     	; 0x844 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7f2:	6d a9       	ldd	r22, Y+53	; 0x35
 7f4:	7e a9       	ldd	r23, Y+54	; 0x36
 7f6:	8f a9       	ldd	r24, Y+55	; 0x37
 7f8:	98 ad       	ldd	r25, Y+56	; 0x38
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	40 e2       	ldi	r20, 0x20	; 32
 800:	51 e4       	ldi	r21, 0x41	; 65
 802:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 806:	dc 01       	movw	r26, r24
 808:	cb 01       	movw	r24, r22
 80a:	bc 01       	movw	r22, r24
 80c:	cd 01       	movw	r24, r26
 80e:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 812:	dc 01       	movw	r26, r24
 814:	cb 01       	movw	r24, r22
 816:	98 ab       	std	Y+48, r25	; 0x30
 818:	8f a7       	std	Y+47, r24	; 0x2f
 81a:	0f c0       	rjmp	.+30     	; 0x83a <main+0x110>
 81c:	89 e1       	ldi	r24, 0x19	; 25
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	9e a7       	std	Y+46, r25	; 0x2e
 822:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 824:	8d a5       	ldd	r24, Y+45	; 0x2d
 826:	9e a5       	ldd	r25, Y+46	; 0x2e
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <main+0xfe>
 82c:	9e a7       	std	Y+46, r25	; 0x2e
 82e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 830:	8f a5       	ldd	r24, Y+47	; 0x2f
 832:	98 a9       	ldd	r25, Y+48	; 0x30
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	98 ab       	std	Y+48, r25	; 0x30
 838:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 83a:	8f a5       	ldd	r24, Y+47	; 0x2f
 83c:	98 a9       	ldd	r25, Y+48	; 0x30
 83e:	00 97       	sbiw	r24, 0x00	; 0
 840:	69 f7       	brne	.-38     	; 0x81c <main+0xf2>
 842:	14 c0       	rjmp	.+40     	; 0x86c <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 844:	69 a9       	ldd	r22, Y+49	; 0x31
 846:	7a a9       	ldd	r23, Y+50	; 0x32
 848:	8b a9       	ldd	r24, Y+51	; 0x33
 84a:	9c a9       	ldd	r25, Y+52	; 0x34
 84c:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 850:	dc 01       	movw	r26, r24
 852:	cb 01       	movw	r24, r22
 854:	98 ab       	std	Y+48, r25	; 0x30
 856:	8f a7       	std	Y+47, r24	; 0x2f
 858:	8f a5       	ldd	r24, Y+47	; 0x2f
 85a:	98 a9       	ldd	r25, Y+48	; 0x30
 85c:	9c a7       	std	Y+44, r25	; 0x2c
 85e:	8b a7       	std	Y+43, r24	; 0x2b
 860:	8b a5       	ldd	r24, Y+43	; 0x2b
 862:	9c a5       	ldd	r25, Y+44	; 0x2c
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <main+0x13a>
 868:	9c a7       	std	Y+44, r25	; 0x2c
 86a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			PORTC = 0xFF;
 86c:	e5 e3       	ldi	r30, 0x35	; 53
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	80 83       	st	Z, r24
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	a8 e4       	ldi	r26, 0x48	; 72
 87a:	b3 e4       	ldi	r27, 0x43	; 67
 87c:	8f a3       	std	Y+39, r24	; 0x27
 87e:	98 a7       	std	Y+40, r25	; 0x28
 880:	a9 a7       	std	Y+41, r26	; 0x29
 882:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 884:	6f a1       	ldd	r22, Y+39	; 0x27
 886:	78 a5       	ldd	r23, Y+40	; 0x28
 888:	89 a5       	ldd	r24, Y+41	; 0x29
 88a:	9a a5       	ldd	r25, Y+42	; 0x2a
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	4a e7       	ldi	r20, 0x7A	; 122
 892:	53 e4       	ldi	r21, 0x43	; 67
 894:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 898:	dc 01       	movw	r26, r24
 89a:	cb 01       	movw	r24, r22
 89c:	8b a3       	std	Y+35, r24	; 0x23
 89e:	9c a3       	std	Y+36, r25	; 0x24
 8a0:	ad a3       	std	Y+37, r26	; 0x25
 8a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
 8a4:	6b a1       	ldd	r22, Y+35	; 0x23
 8a6:	7c a1       	ldd	r23, Y+36	; 0x24
 8a8:	8d a1       	ldd	r24, Y+37	; 0x25
 8aa:	9e a1       	ldd	r25, Y+38	; 0x26
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	40 e8       	ldi	r20, 0x80	; 128
 8b2:	5f e3       	ldi	r21, 0x3F	; 63
 8b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 8b8:	88 23       	and	r24, r24
 8ba:	2c f4       	brge	.+10     	; 0x8c6 <main+0x19c>
		__ticks = 1;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	9a a3       	std	Y+34, r25	; 0x22
 8c2:	89 a3       	std	Y+33, r24	; 0x21
 8c4:	3f c0       	rjmp	.+126    	; 0x944 <main+0x21a>
	else if (__tmp > 65535)
 8c6:	6b a1       	ldd	r22, Y+35	; 0x23
 8c8:	7c a1       	ldd	r23, Y+36	; 0x24
 8ca:	8d a1       	ldd	r24, Y+37	; 0x25
 8cc:	9e a1       	ldd	r25, Y+38	; 0x26
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	3f ef       	ldi	r19, 0xFF	; 255
 8d2:	4f e7       	ldi	r20, 0x7F	; 127
 8d4:	57 e4       	ldi	r21, 0x47	; 71
 8d6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 8da:	18 16       	cp	r1, r24
 8dc:	4c f5       	brge	.+82     	; 0x930 <main+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8de:	6f a1       	ldd	r22, Y+39	; 0x27
 8e0:	78 a5       	ldd	r23, Y+40	; 0x28
 8e2:	89 a5       	ldd	r24, Y+41	; 0x29
 8e4:	9a a5       	ldd	r25, Y+42	; 0x2a
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	40 e2       	ldi	r20, 0x20	; 32
 8ec:	51 e4       	ldi	r21, 0x41	; 65
 8ee:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 8f2:	dc 01       	movw	r26, r24
 8f4:	cb 01       	movw	r24, r22
 8f6:	bc 01       	movw	r22, r24
 8f8:	cd 01       	movw	r24, r26
 8fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 8fe:	dc 01       	movw	r26, r24
 900:	cb 01       	movw	r24, r22
 902:	9a a3       	std	Y+34, r25	; 0x22
 904:	89 a3       	std	Y+33, r24	; 0x21
 906:	0f c0       	rjmp	.+30     	; 0x926 <main+0x1fc>
 908:	89 e1       	ldi	r24, 0x19	; 25
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	98 a3       	std	Y+32, r25	; 0x20
 90e:	8f 8f       	std	Y+31, r24	; 0x1f
 910:	8f 8d       	ldd	r24, Y+31	; 0x1f
 912:	98 a1       	ldd	r25, Y+32	; 0x20
 914:	01 97       	sbiw	r24, 0x01	; 1
 916:	f1 f7       	brne	.-4      	; 0x914 <main+0x1ea>
 918:	98 a3       	std	Y+32, r25	; 0x20
 91a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 91c:	89 a1       	ldd	r24, Y+33	; 0x21
 91e:	9a a1       	ldd	r25, Y+34	; 0x22
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	9a a3       	std	Y+34, r25	; 0x22
 924:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 926:	89 a1       	ldd	r24, Y+33	; 0x21
 928:	9a a1       	ldd	r25, Y+34	; 0x22
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	69 f7       	brne	.-38     	; 0x908 <main+0x1de>
 92e:	0b cf       	rjmp	.-490    	; 0x746 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 930:	6b a1       	ldd	r22, Y+35	; 0x23
 932:	7c a1       	ldd	r23, Y+36	; 0x24
 934:	8d a1       	ldd	r24, Y+37	; 0x25
 936:	9e a1       	ldd	r25, Y+38	; 0x26
 938:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 93c:	dc 01       	movw	r26, r24
 93e:	cb 01       	movw	r24, r22
 940:	9a a3       	std	Y+34, r25	; 0x22
 942:	89 a3       	std	Y+33, r24	; 0x21
 944:	89 a1       	ldd	r24, Y+33	; 0x21
 946:	9a a1       	ldd	r25, Y+34	; 0x22
 948:	9e 8f       	std	Y+30, r25	; 0x1e
 94a:	8d 8f       	std	Y+29, r24	; 0x1d
 94c:	8d 8d       	ldd	r24, Y+29	; 0x1d
 94e:	9e 8d       	ldd	r25, Y+30	; 0x1e
 950:	01 97       	sbiw	r24, 0x01	; 1
 952:	f1 f7       	brne	.-4      	; 0x950 <main+0x226>
 954:	9e 8f       	std	Y+30, r25	; 0x1e
 956:	8d 8f       	std	Y+29, r24	; 0x1d
 958:	f6 ce       	rjmp	.-532    	; 0x746 <main+0x1c>
			_delay_ms(200);
		}	
		else if (sw2 == PIND)
 95a:	e0 e3       	ldi	r30, 0x30	; 48
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	90 81       	ld	r25, Z
 960:	89 ad       	ldd	r24, Y+57	; 0x39
 962:	98 17       	cp	r25, r24
 964:	09 f0       	breq	.+2      	; 0x968 <main+0x23e>
 966:	f9 c0       	rjmp	.+498    	; 0xb5a <main+0x430>
		{
			LCD_wr_string(LINE1, "  switch 2");
 968:	2c e1       	ldi	r18, 0x1C	; 28
 96a:	31 e0       	ldi	r19, 0x01	; 1
 96c:	80 e8       	ldi	r24, 0x80	; 128
 96e:	b9 01       	movw	r22, r18
 970:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
			LCD_wr_string(LINE2, " 500ms blinking!");
 974:	27 e2       	ldi	r18, 0x27	; 39
 976:	31 e0       	ldi	r19, 0x01	; 1
 978:	80 ec       	ldi	r24, 0xC0	; 192
 97a:	b9 01       	movw	r22, r18
 97c:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
			PORTC= 0xFD;
 980:	e5 e3       	ldi	r30, 0x35	; 53
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	8d ef       	ldi	r24, 0xFD	; 253
 986:	80 83       	st	Z, r24
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	aa ef       	ldi	r26, 0xFA	; 250
 98e:	b3 e4       	ldi	r27, 0x43	; 67
 990:	89 8f       	std	Y+25, r24	; 0x19
 992:	9a 8f       	std	Y+26, r25	; 0x1a
 994:	ab 8f       	std	Y+27, r26	; 0x1b
 996:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 998:	69 8d       	ldd	r22, Y+25	; 0x19
 99a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 99c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 99e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 9a0:	20 e0       	ldi	r18, 0x00	; 0
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	4a e7       	ldi	r20, 0x7A	; 122
 9a6:	53 e4       	ldi	r21, 0x43	; 67
 9a8:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 9ac:	dc 01       	movw	r26, r24
 9ae:	cb 01       	movw	r24, r22
 9b0:	8d 8b       	std	Y+21, r24	; 0x15
 9b2:	9e 8b       	std	Y+22, r25	; 0x16
 9b4:	af 8b       	std	Y+23, r26	; 0x17
 9b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 9b8:	6d 89       	ldd	r22, Y+21	; 0x15
 9ba:	7e 89       	ldd	r23, Y+22	; 0x16
 9bc:	8f 89       	ldd	r24, Y+23	; 0x17
 9be:	98 8d       	ldd	r25, Y+24	; 0x18
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	40 e8       	ldi	r20, 0x80	; 128
 9c6:	5f e3       	ldi	r21, 0x3F	; 63
 9c8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 9cc:	88 23       	and	r24, r24
 9ce:	2c f4       	brge	.+10     	; 0x9da <main+0x2b0>
		__ticks = 1;
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	9c 8b       	std	Y+20, r25	; 0x14
 9d6:	8b 8b       	std	Y+19, r24	; 0x13
 9d8:	3f c0       	rjmp	.+126    	; 0xa58 <main+0x32e>
	else if (__tmp > 65535)
 9da:	6d 89       	ldd	r22, Y+21	; 0x15
 9dc:	7e 89       	ldd	r23, Y+22	; 0x16
 9de:	8f 89       	ldd	r24, Y+23	; 0x17
 9e0:	98 8d       	ldd	r25, Y+24	; 0x18
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	3f ef       	ldi	r19, 0xFF	; 255
 9e6:	4f e7       	ldi	r20, 0x7F	; 127
 9e8:	57 e4       	ldi	r21, 0x47	; 71
 9ea:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 9ee:	18 16       	cp	r1, r24
 9f0:	4c f5       	brge	.+82     	; 0xa44 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9f2:	69 8d       	ldd	r22, Y+25	; 0x19
 9f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 9f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	40 e2       	ldi	r20, 0x20	; 32
 a00:	51 e4       	ldi	r21, 0x41	; 65
 a02:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 a06:	dc 01       	movw	r26, r24
 a08:	cb 01       	movw	r24, r22
 a0a:	bc 01       	movw	r22, r24
 a0c:	cd 01       	movw	r24, r26
 a0e:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 a12:	dc 01       	movw	r26, r24
 a14:	cb 01       	movw	r24, r22
 a16:	9c 8b       	std	Y+20, r25	; 0x14
 a18:	8b 8b       	std	Y+19, r24	; 0x13
 a1a:	0f c0       	rjmp	.+30     	; 0xa3a <main+0x310>
 a1c:	89 e1       	ldi	r24, 0x19	; 25
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	9a 8b       	std	Y+18, r25	; 0x12
 a22:	89 8b       	std	Y+17, r24	; 0x11
 a24:	89 89       	ldd	r24, Y+17	; 0x11
 a26:	9a 89       	ldd	r25, Y+18	; 0x12
 a28:	01 97       	sbiw	r24, 0x01	; 1
 a2a:	f1 f7       	brne	.-4      	; 0xa28 <main+0x2fe>
 a2c:	9a 8b       	std	Y+18, r25	; 0x12
 a2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a30:	8b 89       	ldd	r24, Y+19	; 0x13
 a32:	9c 89       	ldd	r25, Y+20	; 0x14
 a34:	01 97       	sbiw	r24, 0x01	; 1
 a36:	9c 8b       	std	Y+20, r25	; 0x14
 a38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a3a:	8b 89       	ldd	r24, Y+19	; 0x13
 a3c:	9c 89       	ldd	r25, Y+20	; 0x14
 a3e:	00 97       	sbiw	r24, 0x00	; 0
 a40:	69 f7       	brne	.-38     	; 0xa1c <main+0x2f2>
 a42:	14 c0       	rjmp	.+40     	; 0xa6c <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a44:	6d 89       	ldd	r22, Y+21	; 0x15
 a46:	7e 89       	ldd	r23, Y+22	; 0x16
 a48:	8f 89       	ldd	r24, Y+23	; 0x17
 a4a:	98 8d       	ldd	r25, Y+24	; 0x18
 a4c:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 a50:	dc 01       	movw	r26, r24
 a52:	cb 01       	movw	r24, r22
 a54:	9c 8b       	std	Y+20, r25	; 0x14
 a56:	8b 8b       	std	Y+19, r24	; 0x13
 a58:	8b 89       	ldd	r24, Y+19	; 0x13
 a5a:	9c 89       	ldd	r25, Y+20	; 0x14
 a5c:	98 8b       	std	Y+16, r25	; 0x10
 a5e:	8f 87       	std	Y+15, r24	; 0x0f
 a60:	8f 85       	ldd	r24, Y+15	; 0x0f
 a62:	98 89       	ldd	r25, Y+16	; 0x10
 a64:	01 97       	sbiw	r24, 0x01	; 1
 a66:	f1 f7       	brne	.-4      	; 0xa64 <main+0x33a>
 a68:	98 8b       	std	Y+16, r25	; 0x10
 a6a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			PORTC= 0xFF;
 a6c:	e5 e3       	ldi	r30, 0x35	; 53
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	80 83       	st	Z, r24
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	aa ef       	ldi	r26, 0xFA	; 250
 a7a:	b3 e4       	ldi	r27, 0x43	; 67
 a7c:	8b 87       	std	Y+11, r24	; 0x0b
 a7e:	9c 87       	std	Y+12, r25	; 0x0c
 a80:	ad 87       	std	Y+13, r26	; 0x0d
 a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 a84:	6b 85       	ldd	r22, Y+11	; 0x0b
 a86:	7c 85       	ldd	r23, Y+12	; 0x0c
 a88:	8d 85       	ldd	r24, Y+13	; 0x0d
 a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
 a8c:	20 e0       	ldi	r18, 0x00	; 0
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	4a e7       	ldi	r20, 0x7A	; 122
 a92:	53 e4       	ldi	r21, 0x43	; 67
 a94:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 a98:	dc 01       	movw	r26, r24
 a9a:	cb 01       	movw	r24, r22
 a9c:	8f 83       	std	Y+7, r24	; 0x07
 a9e:	98 87       	std	Y+8, r25	; 0x08
 aa0:	a9 87       	std	Y+9, r26	; 0x09
 aa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 aa4:	6f 81       	ldd	r22, Y+7	; 0x07
 aa6:	78 85       	ldd	r23, Y+8	; 0x08
 aa8:	89 85       	ldd	r24, Y+9	; 0x09
 aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
 aac:	20 e0       	ldi	r18, 0x00	; 0
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	40 e8       	ldi	r20, 0x80	; 128
 ab2:	5f e3       	ldi	r21, 0x3F	; 63
 ab4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__cmpsf2>
 ab8:	88 23       	and	r24, r24
 aba:	2c f4       	brge	.+10     	; 0xac6 <main+0x39c>
		__ticks = 1;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	9e 83       	std	Y+6, r25	; 0x06
 ac2:	8d 83       	std	Y+5, r24	; 0x05
 ac4:	3f c0       	rjmp	.+126    	; 0xb44 <main+0x41a>
	else if (__tmp > 65535)
 ac6:	6f 81       	ldd	r22, Y+7	; 0x07
 ac8:	78 85       	ldd	r23, Y+8	; 0x08
 aca:	89 85       	ldd	r24, Y+9	; 0x09
 acc:	9a 85       	ldd	r25, Y+10	; 0x0a
 ace:	20 e0       	ldi	r18, 0x00	; 0
 ad0:	3f ef       	ldi	r19, 0xFF	; 255
 ad2:	4f e7       	ldi	r20, 0x7F	; 127
 ad4:	57 e4       	ldi	r21, 0x47	; 71
 ad6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__gesf2>
 ada:	18 16       	cp	r1, r24
 adc:	4c f5       	brge	.+82     	; 0xb30 <main+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 ade:	6b 85       	ldd	r22, Y+11	; 0x0b
 ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
 ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
 ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
 ae6:	20 e0       	ldi	r18, 0x00	; 0
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	40 e2       	ldi	r20, 0x20	; 32
 aec:	51 e4       	ldi	r21, 0x41	; 65
 aee:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
 af2:	dc 01       	movw	r26, r24
 af4:	cb 01       	movw	r24, r22
 af6:	bc 01       	movw	r22, r24
 af8:	cd 01       	movw	r24, r26
 afa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 afe:	dc 01       	movw	r26, r24
 b00:	cb 01       	movw	r24, r22
 b02:	9e 83       	std	Y+6, r25	; 0x06
 b04:	8d 83       	std	Y+5, r24	; 0x05
 b06:	0f c0       	rjmp	.+30     	; 0xb26 <main+0x3fc>
 b08:	89 e1       	ldi	r24, 0x19	; 25
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	9c 83       	std	Y+4, r25	; 0x04
 b0e:	8b 83       	std	Y+3, r24	; 0x03
 b10:	8b 81       	ldd	r24, Y+3	; 0x03
 b12:	9c 81       	ldd	r25, Y+4	; 0x04
 b14:	01 97       	sbiw	r24, 0x01	; 1
 b16:	f1 f7       	brne	.-4      	; 0xb14 <main+0x3ea>
 b18:	9c 83       	std	Y+4, r25	; 0x04
 b1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b1c:	8d 81       	ldd	r24, Y+5	; 0x05
 b1e:	9e 81       	ldd	r25, Y+6	; 0x06
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	9e 83       	std	Y+6, r25	; 0x06
 b24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b26:	8d 81       	ldd	r24, Y+5	; 0x05
 b28:	9e 81       	ldd	r25, Y+6	; 0x06
 b2a:	00 97       	sbiw	r24, 0x00	; 0
 b2c:	69 f7       	brne	.-38     	; 0xb08 <main+0x3de>
 b2e:	0b ce       	rjmp	.-1002   	; 0x746 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b30:	6f 81       	ldd	r22, Y+7	; 0x07
 b32:	78 85       	ldd	r23, Y+8	; 0x08
 b34:	89 85       	ldd	r24, Y+9	; 0x09
 b36:	9a 85       	ldd	r25, Y+10	; 0x0a
 b38:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fixunssfsi>
 b3c:	dc 01       	movw	r26, r24
 b3e:	cb 01       	movw	r24, r22
 b40:	9e 83       	std	Y+6, r25	; 0x06
 b42:	8d 83       	std	Y+5, r24	; 0x05
 b44:	8d 81       	ldd	r24, Y+5	; 0x05
 b46:	9e 81       	ldd	r25, Y+6	; 0x06
 b48:	9a 83       	std	Y+2, r25	; 0x02
 b4a:	89 83       	std	Y+1, r24	; 0x01
 b4c:	89 81       	ldd	r24, Y+1	; 0x01
 b4e:	9a 81       	ldd	r25, Y+2	; 0x02
 b50:	01 97       	sbiw	r24, 0x01	; 1
 b52:	f1 f7       	brne	.-4      	; 0xb50 <main+0x426>
 b54:	9a 83       	std	Y+2, r25	; 0x02
 b56:	89 83       	std	Y+1, r24	; 0x01
 b58:	f6 cd       	rjmp	.-1044   	; 0x746 <main+0x1c>
			_delay_ms(500);
		}
		else
		{
			LCD_wr_string(LINE1, "    ");
 b5a:	28 e3       	ldi	r18, 0x38	; 56
 b5c:	31 e0       	ldi	r19, 0x01	; 1
 b5e:	80 e8       	ldi	r24, 0x80	; 128
 b60:	b9 01       	movw	r22, r18
 b62:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
			LCD_wr_string(LINE2, "     ");
 b66:	2d e3       	ldi	r18, 0x3D	; 61
 b68:	31 e0       	ldi	r19, 0x01	; 1
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	b9 01       	movw	r22, r18
 b6e:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_wr_string>
 b72:	e9 cd       	rjmp	.-1070   	; 0x746 <main+0x1c>

00000b74 <__cmpsf2>:
 b74:	97 d0       	rcall	.+302    	; 0xca4 <__fp_cmp>
 b76:	08 f4       	brcc	.+2      	; 0xb7a <__cmpsf2+0x6>
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	08 95       	ret

00000b7c <__divsf3>:
 b7c:	0c d0       	rcall	.+24     	; 0xb96 <__divsf3x>
 b7e:	cd c0       	rjmp	.+410    	; 0xd1a <__fp_round>
 b80:	c5 d0       	rcall	.+394    	; 0xd0c <__fp_pscB>
 b82:	40 f0       	brcs	.+16     	; 0xb94 <__divsf3+0x18>
 b84:	bc d0       	rcall	.+376    	; 0xcfe <__fp_pscA>
 b86:	30 f0       	brcs	.+12     	; 0xb94 <__divsf3+0x18>
 b88:	21 f4       	brne	.+8      	; 0xb92 <__divsf3+0x16>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	19 f0       	breq	.+6      	; 0xb94 <__divsf3+0x18>
 b8e:	ae c0       	rjmp	.+348    	; 0xcec <__fp_inf>
 b90:	51 11       	cpse	r21, r1
 b92:	f7 c0       	rjmp	.+494    	; 0xd82 <__fp_szero>
 b94:	b1 c0       	rjmp	.+354    	; 0xcf8 <__fp_nan>

00000b96 <__divsf3x>:
 b96:	d2 d0       	rcall	.+420    	; 0xd3c <__fp_split3>
 b98:	98 f3       	brcs	.-26     	; 0xb80 <__divsf3+0x4>

00000b9a <__divsf3_pse>:
 b9a:	99 23       	and	r25, r25
 b9c:	c9 f3       	breq	.-14     	; 0xb90 <__divsf3+0x14>
 b9e:	55 23       	and	r21, r21
 ba0:	b1 f3       	breq	.-20     	; 0xb8e <__divsf3+0x12>
 ba2:	95 1b       	sub	r25, r21
 ba4:	55 0b       	sbc	r21, r21
 ba6:	bb 27       	eor	r27, r27
 ba8:	aa 27       	eor	r26, r26
 baa:	62 17       	cp	r22, r18
 bac:	73 07       	cpc	r23, r19
 bae:	84 07       	cpc	r24, r20
 bb0:	38 f0       	brcs	.+14     	; 0xbc0 <__divsf3_pse+0x26>
 bb2:	9f 5f       	subi	r25, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255
 bb6:	22 0f       	add	r18, r18
 bb8:	33 1f       	adc	r19, r19
 bba:	44 1f       	adc	r20, r20
 bbc:	aa 1f       	adc	r26, r26
 bbe:	a9 f3       	breq	.-22     	; 0xbaa <__divsf3_pse+0x10>
 bc0:	33 d0       	rcall	.+102    	; 0xc28 <__divsf3_pse+0x8e>
 bc2:	0e 2e       	mov	r0, r30
 bc4:	3a f0       	brmi	.+14     	; 0xbd4 <__divsf3_pse+0x3a>
 bc6:	e0 e8       	ldi	r30, 0x80	; 128
 bc8:	30 d0       	rcall	.+96     	; 0xc2a <__divsf3_pse+0x90>
 bca:	91 50       	subi	r25, 0x01	; 1
 bcc:	50 40       	sbci	r21, 0x00	; 0
 bce:	e6 95       	lsr	r30
 bd0:	00 1c       	adc	r0, r0
 bd2:	ca f7       	brpl	.-14     	; 0xbc6 <__divsf3_pse+0x2c>
 bd4:	29 d0       	rcall	.+82     	; 0xc28 <__divsf3_pse+0x8e>
 bd6:	fe 2f       	mov	r31, r30
 bd8:	27 d0       	rcall	.+78     	; 0xc28 <__divsf3_pse+0x8e>
 bda:	66 0f       	add	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	bb 1f       	adc	r27, r27
 be2:	26 17       	cp	r18, r22
 be4:	37 07       	cpc	r19, r23
 be6:	48 07       	cpc	r20, r24
 be8:	ab 07       	cpc	r26, r27
 bea:	b0 e8       	ldi	r27, 0x80	; 128
 bec:	09 f0       	breq	.+2      	; 0xbf0 <__divsf3_pse+0x56>
 bee:	bb 0b       	sbc	r27, r27
 bf0:	80 2d       	mov	r24, r0
 bf2:	bf 01       	movw	r22, r30
 bf4:	ff 27       	eor	r31, r31
 bf6:	93 58       	subi	r25, 0x83	; 131
 bf8:	5f 4f       	sbci	r21, 0xFF	; 255
 bfa:	2a f0       	brmi	.+10     	; 0xc06 <__divsf3_pse+0x6c>
 bfc:	9e 3f       	cpi	r25, 0xFE	; 254
 bfe:	51 05       	cpc	r21, r1
 c00:	68 f0       	brcs	.+26     	; 0xc1c <__divsf3_pse+0x82>
 c02:	74 c0       	rjmp	.+232    	; 0xcec <__fp_inf>
 c04:	be c0       	rjmp	.+380    	; 0xd82 <__fp_szero>
 c06:	5f 3f       	cpi	r21, 0xFF	; 255
 c08:	ec f3       	brlt	.-6      	; 0xc04 <__divsf3_pse+0x6a>
 c0a:	98 3e       	cpi	r25, 0xE8	; 232
 c0c:	dc f3       	brlt	.-10     	; 0xc04 <__divsf3_pse+0x6a>
 c0e:	86 95       	lsr	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	b7 95       	ror	r27
 c16:	f7 95       	ror	r31
 c18:	9f 5f       	subi	r25, 0xFF	; 255
 c1a:	c9 f7       	brne	.-14     	; 0xc0e <__divsf3_pse+0x74>
 c1c:	88 0f       	add	r24, r24
 c1e:	91 1d       	adc	r25, r1
 c20:	96 95       	lsr	r25
 c22:	87 95       	ror	r24
 c24:	97 f9       	bld	r25, 7
 c26:	08 95       	ret
 c28:	e1 e0       	ldi	r30, 0x01	; 1
 c2a:	66 0f       	add	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	bb 1f       	adc	r27, r27
 c32:	62 17       	cp	r22, r18
 c34:	73 07       	cpc	r23, r19
 c36:	84 07       	cpc	r24, r20
 c38:	ba 07       	cpc	r27, r26
 c3a:	20 f0       	brcs	.+8      	; 0xc44 <__divsf3_pse+0xaa>
 c3c:	62 1b       	sub	r22, r18
 c3e:	73 0b       	sbc	r23, r19
 c40:	84 0b       	sbc	r24, r20
 c42:	ba 0b       	sbc	r27, r26
 c44:	ee 1f       	adc	r30, r30
 c46:	88 f7       	brcc	.-30     	; 0xc2a <__divsf3_pse+0x90>
 c48:	e0 95       	com	r30
 c4a:	08 95       	ret

00000c4c <__fixunssfsi>:
 c4c:	7f d0       	rcall	.+254    	; 0xd4c <__fp_splitA>
 c4e:	88 f0       	brcs	.+34     	; 0xc72 <__fixunssfsi+0x26>
 c50:	9f 57       	subi	r25, 0x7F	; 127
 c52:	90 f0       	brcs	.+36     	; 0xc78 <__fixunssfsi+0x2c>
 c54:	b9 2f       	mov	r27, r25
 c56:	99 27       	eor	r25, r25
 c58:	b7 51       	subi	r27, 0x17	; 23
 c5a:	a0 f0       	brcs	.+40     	; 0xc84 <__fixunssfsi+0x38>
 c5c:	d1 f0       	breq	.+52     	; 0xc92 <__fixunssfsi+0x46>
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	1a f0       	brmi	.+6      	; 0xc6e <__fixunssfsi+0x22>
 c68:	ba 95       	dec	r27
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <__fixunssfsi+0x12>
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <__fixunssfsi+0x46>
 c6e:	b1 30       	cpi	r27, 0x01	; 1
 c70:	81 f0       	breq	.+32     	; 0xc92 <__fixunssfsi+0x46>
 c72:	86 d0       	rcall	.+268    	; 0xd80 <__fp_zero>
 c74:	b1 e0       	ldi	r27, 0x01	; 1
 c76:	08 95       	ret
 c78:	83 c0       	rjmp	.+262    	; 0xd80 <__fp_zero>
 c7a:	67 2f       	mov	r22, r23
 c7c:	78 2f       	mov	r23, r24
 c7e:	88 27       	eor	r24, r24
 c80:	b8 5f       	subi	r27, 0xF8	; 248
 c82:	39 f0       	breq	.+14     	; 0xc92 <__fixunssfsi+0x46>
 c84:	b9 3f       	cpi	r27, 0xF9	; 249
 c86:	cc f3       	brlt	.-14     	; 0xc7a <__fixunssfsi+0x2e>
 c88:	86 95       	lsr	r24
 c8a:	77 95       	ror	r23
 c8c:	67 95       	ror	r22
 c8e:	b3 95       	inc	r27
 c90:	d9 f7       	brne	.-10     	; 0xc88 <__fixunssfsi+0x3c>
 c92:	3e f4       	brtc	.+14     	; 0xca2 <__fixunssfsi+0x56>
 c94:	90 95       	com	r25
 c96:	80 95       	com	r24
 c98:	70 95       	com	r23
 c9a:	61 95       	neg	r22
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	08 95       	ret

00000ca4 <__fp_cmp>:
 ca4:	99 0f       	add	r25, r25
 ca6:	00 08       	sbc	r0, r0
 ca8:	55 0f       	add	r21, r21
 caa:	aa 0b       	sbc	r26, r26
 cac:	e0 e8       	ldi	r30, 0x80	; 128
 cae:	fe ef       	ldi	r31, 0xFE	; 254
 cb0:	16 16       	cp	r1, r22
 cb2:	17 06       	cpc	r1, r23
 cb4:	e8 07       	cpc	r30, r24
 cb6:	f9 07       	cpc	r31, r25
 cb8:	c0 f0       	brcs	.+48     	; 0xcea <__fp_cmp+0x46>
 cba:	12 16       	cp	r1, r18
 cbc:	13 06       	cpc	r1, r19
 cbe:	e4 07       	cpc	r30, r20
 cc0:	f5 07       	cpc	r31, r21
 cc2:	98 f0       	brcs	.+38     	; 0xcea <__fp_cmp+0x46>
 cc4:	62 1b       	sub	r22, r18
 cc6:	73 0b       	sbc	r23, r19
 cc8:	84 0b       	sbc	r24, r20
 cca:	95 0b       	sbc	r25, r21
 ccc:	39 f4       	brne	.+14     	; 0xcdc <__fp_cmp+0x38>
 cce:	0a 26       	eor	r0, r26
 cd0:	61 f0       	breq	.+24     	; 0xcea <__fp_cmp+0x46>
 cd2:	23 2b       	or	r18, r19
 cd4:	24 2b       	or	r18, r20
 cd6:	25 2b       	or	r18, r21
 cd8:	21 f4       	brne	.+8      	; 0xce2 <__fp_cmp+0x3e>
 cda:	08 95       	ret
 cdc:	0a 26       	eor	r0, r26
 cde:	09 f4       	brne	.+2      	; 0xce2 <__fp_cmp+0x3e>
 ce0:	a1 40       	sbci	r26, 0x01	; 1
 ce2:	a6 95       	lsr	r26
 ce4:	8f ef       	ldi	r24, 0xFF	; 255
 ce6:	81 1d       	adc	r24, r1
 ce8:	81 1d       	adc	r24, r1
 cea:	08 95       	ret

00000cec <__fp_inf>:
 cec:	97 f9       	bld	r25, 7
 cee:	9f 67       	ori	r25, 0x7F	; 127
 cf0:	80 e8       	ldi	r24, 0x80	; 128
 cf2:	70 e0       	ldi	r23, 0x00	; 0
 cf4:	60 e0       	ldi	r22, 0x00	; 0
 cf6:	08 95       	ret

00000cf8 <__fp_nan>:
 cf8:	9f ef       	ldi	r25, 0xFF	; 255
 cfa:	80 ec       	ldi	r24, 0xC0	; 192
 cfc:	08 95       	ret

00000cfe <__fp_pscA>:
 cfe:	00 24       	eor	r0, r0
 d00:	0a 94       	dec	r0
 d02:	16 16       	cp	r1, r22
 d04:	17 06       	cpc	r1, r23
 d06:	18 06       	cpc	r1, r24
 d08:	09 06       	cpc	r0, r25
 d0a:	08 95       	ret

00000d0c <__fp_pscB>:
 d0c:	00 24       	eor	r0, r0
 d0e:	0a 94       	dec	r0
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	05 06       	cpc	r0, r21
 d18:	08 95       	ret

00000d1a <__fp_round>:
 d1a:	09 2e       	mov	r0, r25
 d1c:	03 94       	inc	r0
 d1e:	00 0c       	add	r0, r0
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0xc>
 d22:	88 23       	and	r24, r24
 d24:	52 f0       	brmi	.+20     	; 0xd3a <__fp_round+0x20>
 d26:	bb 0f       	add	r27, r27
 d28:	40 f4       	brcc	.+16     	; 0xd3a <__fp_round+0x20>
 d2a:	bf 2b       	or	r27, r31
 d2c:	11 f4       	brne	.+4      	; 0xd32 <__fp_round+0x18>
 d2e:	60 ff       	sbrs	r22, 0
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <__fp_round+0x20>
 d32:	6f 5f       	subi	r22, 0xFF	; 255
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	08 95       	ret

00000d3c <__fp_split3>:
 d3c:	57 fd       	sbrc	r21, 7
 d3e:	90 58       	subi	r25, 0x80	; 128
 d40:	44 0f       	add	r20, r20
 d42:	55 1f       	adc	r21, r21
 d44:	59 f0       	breq	.+22     	; 0xd5c <__fp_splitA+0x10>
 d46:	5f 3f       	cpi	r21, 0xFF	; 255
 d48:	71 f0       	breq	.+28     	; 0xd66 <__fp_splitA+0x1a>
 d4a:	47 95       	ror	r20

00000d4c <__fp_splitA>:
 d4c:	88 0f       	add	r24, r24
 d4e:	97 fb       	bst	r25, 7
 d50:	99 1f       	adc	r25, r25
 d52:	61 f0       	breq	.+24     	; 0xd6c <__fp_splitA+0x20>
 d54:	9f 3f       	cpi	r25, 0xFF	; 255
 d56:	79 f0       	breq	.+30     	; 0xd76 <__fp_splitA+0x2a>
 d58:	87 95       	ror	r24
 d5a:	08 95       	ret
 d5c:	12 16       	cp	r1, r18
 d5e:	13 06       	cpc	r1, r19
 d60:	14 06       	cpc	r1, r20
 d62:	55 1f       	adc	r21, r21
 d64:	f2 cf       	rjmp	.-28     	; 0xd4a <__fp_split3+0xe>
 d66:	46 95       	lsr	r20
 d68:	f1 df       	rcall	.-30     	; 0xd4c <__fp_splitA>
 d6a:	08 c0       	rjmp	.+16     	; 0xd7c <__fp_splitA+0x30>
 d6c:	16 16       	cp	r1, r22
 d6e:	17 06       	cpc	r1, r23
 d70:	18 06       	cpc	r1, r24
 d72:	99 1f       	adc	r25, r25
 d74:	f1 cf       	rjmp	.-30     	; 0xd58 <__fp_splitA+0xc>
 d76:	86 95       	lsr	r24
 d78:	71 05       	cpc	r23, r1
 d7a:	61 05       	cpc	r22, r1
 d7c:	08 94       	sec
 d7e:	08 95       	ret

00000d80 <__fp_zero>:
 d80:	e8 94       	clt

00000d82 <__fp_szero>:
 d82:	bb 27       	eor	r27, r27
 d84:	66 27       	eor	r22, r22
 d86:	77 27       	eor	r23, r23
 d88:	cb 01       	movw	r24, r22
 d8a:	97 f9       	bld	r25, 7
 d8c:	08 95       	ret

00000d8e <__gesf2>:
 d8e:	8a df       	rcall	.-236    	; 0xca4 <__fp_cmp>
 d90:	08 f4       	brcc	.+2      	; 0xd94 <__gesf2+0x6>
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	08 95       	ret

00000d96 <__mulsf3>:
 d96:	0b d0       	rcall	.+22     	; 0xdae <__mulsf3x>
 d98:	c0 cf       	rjmp	.-128    	; 0xd1a <__fp_round>
 d9a:	b1 df       	rcall	.-158    	; 0xcfe <__fp_pscA>
 d9c:	28 f0       	brcs	.+10     	; 0xda8 <__mulsf3+0x12>
 d9e:	b6 df       	rcall	.-148    	; 0xd0c <__fp_pscB>
 da0:	18 f0       	brcs	.+6      	; 0xda8 <__mulsf3+0x12>
 da2:	95 23       	and	r25, r21
 da4:	09 f0       	breq	.+2      	; 0xda8 <__mulsf3+0x12>
 da6:	a2 cf       	rjmp	.-188    	; 0xcec <__fp_inf>
 da8:	a7 cf       	rjmp	.-178    	; 0xcf8 <__fp_nan>
 daa:	11 24       	eor	r1, r1
 dac:	ea cf       	rjmp	.-44     	; 0xd82 <__fp_szero>

00000dae <__mulsf3x>:
 dae:	c6 df       	rcall	.-116    	; 0xd3c <__fp_split3>
 db0:	a0 f3       	brcs	.-24     	; 0xd9a <__mulsf3+0x4>

00000db2 <__mulsf3_pse>:
 db2:	95 9f       	mul	r25, r21
 db4:	d1 f3       	breq	.-12     	; 0xdaa <__mulsf3+0x14>
 db6:	95 0f       	add	r25, r21
 db8:	50 e0       	ldi	r21, 0x00	; 0
 dba:	55 1f       	adc	r21, r21
 dbc:	62 9f       	mul	r22, r18
 dbe:	f0 01       	movw	r30, r0
 dc0:	72 9f       	mul	r23, r18
 dc2:	bb 27       	eor	r27, r27
 dc4:	f0 0d       	add	r31, r0
 dc6:	b1 1d       	adc	r27, r1
 dc8:	63 9f       	mul	r22, r19
 dca:	aa 27       	eor	r26, r26
 dcc:	f0 0d       	add	r31, r0
 dce:	b1 1d       	adc	r27, r1
 dd0:	aa 1f       	adc	r26, r26
 dd2:	64 9f       	mul	r22, r20
 dd4:	66 27       	eor	r22, r22
 dd6:	b0 0d       	add	r27, r0
 dd8:	a1 1d       	adc	r26, r1
 dda:	66 1f       	adc	r22, r22
 ddc:	82 9f       	mul	r24, r18
 dde:	22 27       	eor	r18, r18
 de0:	b0 0d       	add	r27, r0
 de2:	a1 1d       	adc	r26, r1
 de4:	62 1f       	adc	r22, r18
 de6:	73 9f       	mul	r23, r19
 de8:	b0 0d       	add	r27, r0
 dea:	a1 1d       	adc	r26, r1
 dec:	62 1f       	adc	r22, r18
 dee:	83 9f       	mul	r24, r19
 df0:	a0 0d       	add	r26, r0
 df2:	61 1d       	adc	r22, r1
 df4:	22 1f       	adc	r18, r18
 df6:	74 9f       	mul	r23, r20
 df8:	33 27       	eor	r19, r19
 dfa:	a0 0d       	add	r26, r0
 dfc:	61 1d       	adc	r22, r1
 dfe:	23 1f       	adc	r18, r19
 e00:	84 9f       	mul	r24, r20
 e02:	60 0d       	add	r22, r0
 e04:	21 1d       	adc	r18, r1
 e06:	82 2f       	mov	r24, r18
 e08:	76 2f       	mov	r23, r22
 e0a:	6a 2f       	mov	r22, r26
 e0c:	11 24       	eor	r1, r1
 e0e:	9f 57       	subi	r25, 0x7F	; 127
 e10:	50 40       	sbci	r21, 0x00	; 0
 e12:	8a f0       	brmi	.+34     	; 0xe36 <__mulsf3_pse+0x84>
 e14:	e1 f0       	breq	.+56     	; 0xe4e <__mulsf3_pse+0x9c>
 e16:	88 23       	and	r24, r24
 e18:	4a f0       	brmi	.+18     	; 0xe2c <__mulsf3_pse+0x7a>
 e1a:	ee 0f       	add	r30, r30
 e1c:	ff 1f       	adc	r31, r31
 e1e:	bb 1f       	adc	r27, r27
 e20:	66 1f       	adc	r22, r22
 e22:	77 1f       	adc	r23, r23
 e24:	88 1f       	adc	r24, r24
 e26:	91 50       	subi	r25, 0x01	; 1
 e28:	50 40       	sbci	r21, 0x00	; 0
 e2a:	a9 f7       	brne	.-22     	; 0xe16 <__mulsf3_pse+0x64>
 e2c:	9e 3f       	cpi	r25, 0xFE	; 254
 e2e:	51 05       	cpc	r21, r1
 e30:	70 f0       	brcs	.+28     	; 0xe4e <__mulsf3_pse+0x9c>
 e32:	5c cf       	rjmp	.-328    	; 0xcec <__fp_inf>
 e34:	a6 cf       	rjmp	.-180    	; 0xd82 <__fp_szero>
 e36:	5f 3f       	cpi	r21, 0xFF	; 255
 e38:	ec f3       	brlt	.-6      	; 0xe34 <__mulsf3_pse+0x82>
 e3a:	98 3e       	cpi	r25, 0xE8	; 232
 e3c:	dc f3       	brlt	.-10     	; 0xe34 <__mulsf3_pse+0x82>
 e3e:	86 95       	lsr	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	b7 95       	ror	r27
 e46:	f7 95       	ror	r31
 e48:	e7 95       	ror	r30
 e4a:	9f 5f       	subi	r25, 0xFF	; 255
 e4c:	c1 f7       	brne	.-16     	; 0xe3e <__mulsf3_pse+0x8c>
 e4e:	fe 2b       	or	r31, r30
 e50:	88 0f       	add	r24, r24
 e52:	91 1d       	adc	r25, r1
 e54:	96 95       	lsr	r25
 e56:	87 95       	ror	r24
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <_exit>:
 e5c:	f8 94       	cli

00000e5e <__stop_program>:
 e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__stop_program>
